<script>
  // Function to show/hide date selection message
  function showDateSelectionMessage(show) {
    let messageElement = document.getElementById('evey-date-selection-message');
    if (show) {
      if (!messageElement) {
        messageElement = document.createElement('div');
        messageElement.id = 'evey-date-selection-message';
        messageElement.className = 'sketch-card sketch seed-alert';
        messageElement.style.cssText = `
          margin: 1rem 0;
          padding: 1rem;
          background: rgba(255, 179, 0, 0.1);
          border: 2px dashed #ffb300;
          border-radius: 8px;
          text-align: center;
          color: #d32f2f;
          font-weight: 600;
          position: relative;
        `;
        messageElement.innerHTML = `
          <svg class="sketch-border" viewBox="0 0 100 100" aria-hidden="true" preserveAspectRatio="none" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; width: 100%; height: 100%; pointer-events: none;">
            <rect x="4" y="4" width="92" height="92" rx="12" fill="none" stroke-width="3.2" stroke-linecap="round" stroke-dasharray="8 6 4 10" stroke="#ffb300" opacity="0.7"/>
          </svg>
          <div style="position: relative; z-index: 1;">
            üìÖ <strong>Prima seleziona data e ora</strong> cliccando su "Seleziona data e ora d'ingresso" per abilitare la selezione delle quantit√†
          </div>
        `;
        const eveyVariants = document.querySelector('.evey__variants');
        if (eveyVariants) {
          eveyVariants.parentNode.insertBefore(messageElement, eveyVariants);
        }
      }
      messageElement.style.display = 'block';
    } else if (messageElement) {
      messageElement.style.display = 'none';
    }
  }

   function blockMultiTicket(){
    const fetchEventId = document.querySelector('input[name="properties[_event_id]"]');
    const eveyVariantContainers = document.querySelectorAll('.evey__variant-container');
    const eveyVariants = document.querySelector('.evey__variants');
    const fetchEventIdobserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
          
        if (document.querySelector('input[name="properties[_event_id]"]').value == '') {
            eveyVariantContainers.forEach(container => {
              container.style.pointerEvents = 'none';
              container.style.opacity = '0.6';
              container.style.filter = 'grayscale(50%)';
            });
            eveyVariants.style.cursor = 'not-allowed';
            showDateSelectionMessage(true);
            }else{
                eveyVariantContainers.forEach(container => {
                  container.style.pointerEvents = 'all';
                  container.style.opacity = '1';
                  container.style.filter = 'none';
                });
                eveyVariants.style.cursor = 'auto';
                showDateSelectionMessage(false);
            }
      });
    });
    
    const fetchEventIdconfig = {
      attributes: true,
      childList: true,
      characterData: true,
      subtree: true
    };
    
    fetchEventIdobserver.observe(fetchEventId, fetchEventIdconfig);

  }

  
  const fetchEveyMetaData = {{ product.metafields.evey.event.value | default: product.metafields.evey.event | json }};
  if (fetchEveyMetaData && fetchEveyMetaData.date_type === "recurring") {
    let productBlocks = document.querySelector("#MainContent");
    let pbObserver = new MutationObserver(function () {
        // const checkForEveyScheduler = document.querySelector('#evey-schedule-calendar-modal');
        const fetchEventId = document.querySelector('input[name="properties[_event_id]"]')
        const eveyVariantContainers = document.querySelectorAll('.evey__variant-container');
        const eveyVariants = document.querySelector('.evey__variants');
        if (eveyVariantContainers && eveyVariants && fetchEventId) {
            pbObserver.disconnect();
            eveyVariantContainers.forEach(container => {
              container.style.pointerEvents = 'none';
              container.style.opacity = '0.6';
              container.style.filter = 'grayscale(50%)';
            });
            eveyVariants.style.cursor = 'not-allowed';
            showDateSelectionMessage(true);
            blockMultiTicket();
            
            // Add "Biglietti Parco" title to Evey box
            addBigliettParcoTitle();
        }
    });

    pbObserver.observe(productBlocks, { attributes: false, childList: true, subtree: true });
  }
  
  // Add "Biglietti Parco" title inside Evey box
  function addBigliettParcoTitle() {
    const eveyMultiVariant = document.querySelector('.evey__multi-variant-selector');
    if (eveyMultiVariant && !eveyMultiVariant.querySelector('.biglietti-parco-title')) {
      const title = document.createElement('h3');
      title.className = 'biglietti-parco-title';
      title.style.cssText = `
        color: #ffb300;
        font-size: 1.5rem;
        font-weight: 700;
        margin: 0 0 1.5rem 0;
        text-align: center;
      `;
      title.textContent = 'Biglietti Parco';
      
      eveyMultiVariant.insertBefore(title, eveyMultiVariant.firstChild);
    }
  }
  
  // Also add title when Evey loads normally
  setTimeout(addBigliettParcoTitle, 2000);

  // Add tooltips to ticket types with close functionality
  function addTicketTooltips() {
    const ticketInfo = {
      'Intero': 'Biglietto standard per adulti. Include l\'accesso completo al parco nel giorno e orario selezionato.',
      'Ridotto': 'Per bambini 3-12 anni e persone con disabilit√†. Include accompagnatore gratuito per disabili con accesso prioritario.',
      'SaltaFila': 'Accesso prioritario senza code all\'ingresso. Include tutti i vantaggi del biglietto intero.',
      'Saltafila': 'Accesso prioritario senza code all\'ingresso. Include tutti i vantaggi del biglietto intero.'
    };

    setTimeout(() => {
      document.querySelectorAll('.evey__variant-name').forEach(nameElement => {
        const ticketType = nameElement.textContent.trim();
        if (ticketInfo[ticketType] && !nameElement.querySelector('.ticket-tooltip')) {
          nameElement.style.position = 'relative';
          
          const tooltip = document.createElement('div');
          tooltip.className = 'ticket-tooltip';
          tooltip.innerHTML = `
            <div class="tooltip-content">${ticketInfo[ticketType]}</div>
            <button class="tooltip-close">√ó</button>
          `;
          
          nameElement.appendChild(tooltip);
          
          // Add close functionality
          const closeBtn = tooltip.querySelector('.tooltip-close');
          closeBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            tooltip.style.opacity = '0';
            tooltip.style.visibility = 'hidden';
            
            // Mark tooltip as disabled for a short time
            tooltip.classList.add('tooltip-disabled');
            setTimeout(() => {
              tooltip.classList.remove('tooltip-disabled');
            }, 3000);
          });
        }
      });
      
      // Prevent tooltip from opening when clicking quantity buttons
      document.querySelectorAll('.quantity__button').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          
          // Temporarily disable tooltips in this container
          const container = this.closest('.evey__variant-container');
          if (container) {
            container.classList.add('tooltip-disabled');
            setTimeout(() => {
              container.classList.remove('tooltip-disabled');
            }, 1000);
          }
        });
      });
      
      // Close tooltip when clicking outside
      document.addEventListener('click', function(e) {
        if (!e.target.closest('.evey__variant-name')) {
          document.querySelectorAll('.ticket-tooltip').forEach(tooltip => {
            tooltip.style.opacity = '0';
            tooltip.style.visibility = 'hidden';
          });
        }
      });
      
    }, 1000);
  }

  // Initialize tooltips when page loads and when Evey loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', addTicketTooltips);
  } else {
    addTicketTooltips();
  }

  // Re-add tooltips when Evey content changes
  setTimeout(addTicketTooltips, 2000);

  // Replace open ticket box with interactive form
  function addOpenTicketForm() {
    const openTicketBox = document.querySelector('.sketch-card.seed-9');
    if (openTicketBox && !document.getElementById('open-ticket-form')) {
      
      // Immediately hide the old content and show loading
      openTicketBox.style.opacity = '0.3';
      openTicketBox.innerHTML = `
        <div style="text-align: center; padding: 2rem; color: #ffb300;">
          <div style="font-size: 2rem; margin-bottom: 1rem;">üéüÔ∏è</div>
          <div style="color: rgba(255,255,255,0.8);">Caricamento Biglietto Open...</div>
        </div>
      `;
      
      // Add smooth transition
      openTicketBox.style.transition = 'all 0.3s ease';
      // Try multiple possible product handles and search methods  
      const possibleHandles = [
        'biglietto-open-2025',  // Correct handle provided by user
        'biglietto-open-2024-2025',
        'biglietto-open',
        'open-ticket', 
        'open-pass',
        'biglietto-open-lucine',
        'pass-open',
        'open'
      ];
      
      // Function to try fetching product with different handles
      const fetchOpenProduct = async () => {
        // First try the handles
        for (const handle of possibleHandles) {
          try {
            console.log(`Trying product handle: ${handle}`);
            const response = await fetch(`/products/${handle}.js`);
            if (response.ok) {
              const product = await response.json();
              if (product && product.id && product.variants && product.variants.length > 0) {
                console.log(`Found product with handle: ${handle}`, product);
                return product;
              }
            }
          } catch (error) {
            console.log(`Product not found with handle: ${handle}`);
            continue;
          }
        }
        
        // If handles fail, create a working form with the known variant ID
        // This allows the purchase to work even if we can't fetch product details
        console.log('Could not fetch product details, using variant ID directly');
        return {
          id: '10082871050579',
          title: 'Biglietto Open',
          price: null, // Will be shown as "Prezzo disponibile al checkout"
          variants: [{
            id: '10082871050579',
            available: true
          }]
        };
      };
      
      fetchOpenProduct()
        .then(product => {
          if (!product || !product.variants || !product.variants[0]) {
            throw new Error('Invalid product data');
          }
          
          const price = product.price ? (product.price / 100).toFixed(2).replace('.', ',') : 'Disponibile al checkout';
          const variantId = product.variants[0].id;
          
          const formHTML = `
            <div class="open-ticket-card" id="open-ticket-form" style="background: linear-gradient(135deg, rgba(255,179,0,0.1) 0%, rgba(211,47,47,0.05) 100%); border: 2px solid #ffb300; border-radius: 16px; padding: 1.5rem; margin: 2rem 0; position: relative; overflow: visible;">
              <div style="position: absolute; top: -30px; right: -30px; width: 60px; height: 60px; background: radial-gradient(circle, rgba(255,179,0,0.2) 0%, transparent 70%); border-radius: 50%;"></div>
              
              <form id="open-ticket-product-form" action="/cart/add" method="post" enctype="multipart/form-data">
                <div class="open-form-content" style="position: relative; z-index: 1;">
                  <div class="open-details" style="width: 100%;">
                    <div class="open-header" style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.75rem; flex-wrap: wrap;">
                      <h3 style="color: #ffb300; margin: 0; font-weight: 700; font-size: 1.5rem;">Biglietto Open</h3>
                      <span style="background: #d32f2f; color: white; padding: 4px 10px; border-radius: 8px; font-size: 11px; font-weight: 600;">ESCLUSIVO</span>
                    </div>
                    
                    <p style="color: rgba(255,255,255,0.9); line-height: 1.5; margin: 0 0 1rem 0; font-size: 16px;">
                      <strong>Pass esclusivo senza prenotazione</strong> - accedi quando preferisci!<br>
                      Nessun vincolo di orario o data specifica<br>
                      Accesso prioritario ed immediato al parco<br>
                      Esperienza premium senza code
                    </p>
                    
                    <div class="open-pricing" style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 1rem; flex-wrap: wrap;">
                      <div style="display: flex; align-items: center; gap: 0.25rem;">
                        <span style="color: #ffb300; font-weight: 700; font-size: 1.25rem;">${price.includes('‚Ç¨') ? price : '‚Ç¨' + price}</span>
                      </div>
                    </div>
                    
                    <div class="open-actions" style="display: flex; align-items: center; gap: 0.75rem; flex-wrap: wrap;">
                      <div class="lucine-quantity-controls">
                        <button type="button" class="lucine-qty-btn" data-action="minus" data-symbol="‚àí"></button>
                        <input type="number" name="quantity" id="open-quantity" value="1" min="1" max="10" class="lucine-qty-input">
                        <button type="button" class="lucine-qty-btn" data-action="plus" data-symbol="+"></button>
                      </div>
                      
                      <input type="hidden" name="id" value="${variantId}">
                      <button type="submit" id="open-add-to-cart" style="background: linear-gradient(135deg, #ffb300, #ff8f00); color: #0d1b0f; padding: 20px 32px; border: 3px solid #ffb300; border-radius: 16px; display: inline-flex; align-items: center; font-weight: 700; font-size: 16px; box-shadow: 0 6px 24px rgba(255,179,0,0.4); cursor: pointer; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); flex: 1; min-width: 160px; justify-content: center; text-shadow: 1px 1px 2px rgba(0,0,0,0.1); text-transform: uppercase; letter-spacing: 1px;" onmouseover="this.style.background='linear-gradient(135deg, #d32f2f, #c62828)'; this.style.borderColor='#d32f2f'; this.style.color='white'; this.style.transform='translateY(-3px)'; this.style.boxShadow='0 8px 32px rgba(211,47,47,0.5)'" onmouseout="this.style.background='linear-gradient(135deg, #ffb300, #ff8f00)'; this.style.borderColor='#ffb300'; this.style.color='#0d1b0f'; this.style.transform='translateY(0)'; this.style.boxShadow='0 6px 24px rgba(255,179,0,0.4)'"
                        <span id="open-cart-text">Aggiungi al Carrello</span>
                      </button>
                    </div>
                  </div>
                </div>
              </form>
            </div>
          `;
          
          // Smooth transition to new content
          openTicketBox.style.opacity = '0';
          setTimeout(() => {
            openTicketBox.outerHTML = formHTML;
            const newForm = document.getElementById('open-ticket-form');
            if (newForm) {
              newForm.style.opacity = '0';
              newForm.style.transition = 'opacity 0.3s ease';
              setTimeout(() => {
                newForm.style.opacity = '1';
              }, 50);
            }
            // Initialize form functionality after insertion
            setTimeout(initializeOpenTicketForm, 150);
          }, 150);
        })
        .catch(error => {
          console.error('Open ticket product not available:', error);
          // Show error message instead of fake pricing
          const errorHTML = `
            <div class="open-ticket-error" style="background: rgba(211,47,47,0.1); border: 2px solid #d32f2f; border-radius: 16px; padding: 2rem; margin: 2rem 0; text-align: center;">
              <div style="color: #d32f2f; font-size: 1.5rem; margin-bottom: 1rem;">‚ö†Ô∏è</div>
              <h3 style="color: #d32f2f; margin: 0 0 1rem 0;">Biglietto Open temporaneamente non disponibile</h3>
              <p style="color: rgba(255,255,255,0.8); margin: 0 0 1.5rem 0;">Il prodotto non √® attualmente disponibile per l'acquisto online.</p>
              <a href="https://lucinedinatale.it/products/biglietto-open-2024-2025" style="background: #d32f2f; color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: 600;">
                Visita la pagina prodotto
              </a>
            </div>
          `;
          
          // Smooth transition to error state
          openTicketBox.style.opacity = '0';
          setTimeout(() => {
            openTicketBox.outerHTML = errorHTML;
            const errorDiv = document.querySelector('.open-ticket-error');
            if (errorDiv) {
              errorDiv.style.opacity = '0';
              errorDiv.style.transition = 'opacity 0.3s ease';
              setTimeout(() => {
                errorDiv.style.opacity = '1';
              }, 50);
            }
          }, 150);
        });
    }
  }

  function initializeOpenTicketForm() {
    // New quantity controls using lucine-qty-btn class
    document.querySelectorAll('.lucine-qty-btn').forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const input = document.getElementById('open-quantity');
        const action = this.getAttribute('data-action');
        let value = parseInt(input.value) || 1;
        
        if (action === 'plus' && value < 10) {
          input.value = value + 1;
        } else if (action === 'minus' && value > 1) {
          input.value = value - 1;
        }
      });
    });

    // Form submission
    const form = document.getElementById('open-ticket-product-form');
    if (form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const addBtn = document.getElementById('open-add-to-cart');
        const btnText = document.getElementById('open-cart-text');
        
        if (addBtn) addBtn.disabled = true;
        if (btnText) btnText.textContent = 'Aggiungendo...';
        
        fetch('/cart/add.js', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (btnText) btnText.textContent = 'Aggiunto! ‚úì';
          setTimeout(() => {
            window.location.href = '/cart';
          }, 800);
        })
        .catch(error => {
          console.error('Error:', error);
          if (btnText) btnText.textContent = 'Errore - Riprova';
          if (addBtn) addBtn.disabled = false;
          setTimeout(() => {
            if (btnText) btnText.textContent = 'Aggiungi al Carrello';
          }, 2000);
        });
      });
    }
  }

  // Initialize Open ticket form when page loads (faster timing)
  setTimeout(addOpenTicketForm, 800);

  // Force Italian localization for Evey calendar
  function forceItalianCalendar() {
    // Override common English strings in Evey calendar
    const eveyStringsMap = {
      'Select Date': 'Seleziona Data',
      'Select Time': 'Seleziona Ora',
      'Select': 'Seleziona',
      'January': 'Gennaio', 'February': 'Febbraio', 'March': 'Marzo', 'April': 'Aprile',
      'May': 'Maggio', 'June': 'Giugno', 'July': 'Luglio', 'August': 'Agosto',
      'September': 'Settembre', 'October': 'Ottobre', 'November': 'Novembre', 'December': 'Dicembre',
      'Monday': 'Luned√¨', 'Tuesday': 'Marted√¨', 'Wednesday': 'Mercoled√¨', 'Thursday': 'Gioved√¨',
      'Friday': 'Venerd√¨', 'Saturday': 'Sabato', 'Sunday': 'Domenica',
      'Mon': 'Lun', 'Tue': 'Mar', 'Wed': 'Mer', 'Thu': 'Gio', 'Fri': 'Ven', 'Sat': 'Sab', 'Sun': 'Dom',
      'Available': 'Disponibile', 'Sold Out': 'Esaurito', 'Choose Time': 'Scegli Orario'
    };

    // Monitor for new DOM elements (Evey calendar)
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === 1) { // Element node
            translateEveyCalendar(node, eveyStringsMap);
          }
        });
      });
    });

    observer.observe(document.body, { childList: true, subtree: true });

    // Initial translation
    setTimeout(() => translateEveyCalendar(document, eveyStringsMap), 1000);
  }

  function translateEveyCalendar(element, stringsMap) {
    // Find and translate text nodes
    const walker = document.createTreeWalker(
      element, 
      NodeFilter.SHOW_TEXT,
      null,
      false
    );

    let node;
    while (node = walker.nextNode()) {
      const text = node.textContent.trim();
      if (stringsMap[text]) {
        node.textContent = stringsMap[text];
      }
    }

    // Also check for attributes and specific selectors
    element.querySelectorAll && element.querySelectorAll('[title], [placeholder], [aria-label]').forEach(el => {
      if (el.title && stringsMap[el.title]) el.title = stringsMap[el.title];
      if (el.placeholder && stringsMap[el.placeholder]) el.placeholder = stringsMap[el.placeholder];
      if (el.getAttribute('aria-label') && stringsMap[el.getAttribute('aria-label')]) {
        el.setAttribute('aria-label', stringsMap[el.getAttribute('aria-label')]);
      }
    });
  }

  // Initialize calendar translation
  setTimeout(forceItalianCalendar, 500);

  // Minimal Evey fixes - keep it as original as possible
  // Just ensure add to cart buttons work when date is selected
  function ensureEveyFunctionality() {
    // Let Evey handle everything naturally - minimal intervention
    console.log('Evey functionality preserved in original form');
  }
  
  setTimeout(ensureEveyFunctionality, 1000);

  // Replace ticket guide with collapsible version
  function replaceTicketGuide() {
    const ticketGuide = document.querySelector('[style*="Guida ai Biglietti"]');
    if (ticketGuide && ticketGuide.innerHTML.includes('Guida ai Biglietti')) {
      fetch('/snippets/ticket-guide-collapsible.liquid')
        .then(response => response.text())
        .then(html => {
          ticketGuide.outerHTML = html;
        })
        .catch(error => console.log('Could not load collapsible guide'));
    }
  }
  
  // Initialize collapsible guide
  setTimeout(replaceTicketGuide, 500);
</script>

<style>
/* Enhanced UX for disabled Evey elements */
.evey__multi-variant-selector button[type="submit"][name="add"]:disabled {
  opacity: 0.6 !important;
  cursor: not-allowed !important;
  position: relative;
}

/* Fix quantity button icons visibility */
.evey__variant-container .quantity__button svg,
.evey__variant-container .quantity__button .icon {
  width: 16px !important;
  height: 16px !important;
  stroke: currentColor !important;
  fill: currentColor !important;
  stroke-width: 2 !important;
  display: block !important;
  opacity: 1 !important;
  visibility: visible !important;
}

.evey__variant-container .quantity__button {
  background: #2e7d32 !important;
  border: 1px solid #2e7d32 !important;
  color: white !important;
  border-radius: 4px !important;
  width: 45px;
  height: 45px;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Remove hint box - layout is now clear enough */

/* Keep Evey button more original - minimal changes */
button[data-evey-trigger] {
  /* Let Evey handle the button text naturally */
}

/* Ensure "Add to Cart" button text is in Italian */
button[name="add"][type="submit"] {
  font-size: 0 !important;
  position: relative;
}

button[name="add"][type="submit"]::after {
  content: "Aggiungi al Carrello";
  font-size: 16px !important;
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  color: inherit;
  width: 100%;
  height: 100%;
}

/* Fix excessive padding on product media */
.product__media.media.media--transparent {
  padding-top: 20px !important;
}

/* Card style ONLY for Evey block */
.evey__multi-variant-selector {
  background: rgba(255, 255, 255, 0.05) !important;
  border-radius: 20px !important;
  padding: 2rem !important;
  backdrop-filter: blur(15px) !important;
  border: 1px solid rgba(255, 255, 255, 0.1) !important;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3) !important;
  margin: 2rem 0 !important;
  position: relative;
  overflow: visible;
}

/* Add a subtle glow effect to Evey card */
.evey__multi-variant-selector::before {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, #ffb300, #d32f2f, #2e7d32, #ffb300);
  border-radius: 20px;
  opacity: 0.3;
  z-index: -1;
  filter: blur(10px);
}

/* Style custom liquid blocks - keep them full width unless they are purchase-related */
.shopify-block[id*="custom_liquid"],
.product-block__content {
  background: transparent !important;
  max-width: 100% !important;
  padding: 1.5rem 0 !important;
}

/* Only specific alert/important boxes get card treatment */
.alert-box,
.info-box-arancio,
.info-box {
  background: rgba(255, 255, 255, 0.05) !important;
  border-radius: 16px !important;
  padding: 1.5rem !important;
  border: 1px solid rgba(255, 255, 255, 0.1) !important;
  margin: 1.5rem 0 !important;
}

/* Ticket guide cards - keep them in a nice grid */
.card-container {
  max-width: 100% !important;
  background: transparent !important;
}

.card-container .card {
  background: rgba(255, 255, 255, 0.03) !important;
  border: 1px solid rgba(255, 255, 255, 0.08) !important;
  border-radius: 12px !important;
  padding: 1.5rem !important;
  margin-bottom: 1rem !important;
  transition: all 0.3s ease;
}

.card-container .card:hover {
  background: rgba(255, 255, 255, 0.06) !important;
  transform: translateX(5px);
  border-color: rgba(255, 179, 0, 0.3) !important;
}

/* Mobile optimizations */
@media screen and (max-width: 768px) {
  .product__media {
    display: none !important;
  }
  
  .ticket_guide,
  .collapsible-row {
    display: none !important;
  }
  
  .sketch-card:not(.open-ticket):not(.seed-alert) {
    display: none !important;
  }
  
  .product__info-wrapper {
    padding: 1rem;
  }
}

/* Improved Open ticket box styling */
.open-ticket-card,
.sketch-card.seed-9 {
  background: linear-gradient(135deg, rgba(255,179,0,0.1) 0%, rgba(211,47,47,0.05) 100%) !important;
  border: 2px solid #ffb300 !important;
  border-radius: 16px !important;
  position: relative;
  overflow: hidden;
}

.open-ticket-card::before,
.sketch-card.seed-9::before {
  content: '';
  position: absolute;
  top: -50px;
  right: -50px;
  width: 100px;
  height: 100px;
  background: radial-gradient(circle, rgba(255,179,0,0.2) 0%, transparent 70%);
  border-radius: 50%;
  pointer-events: none;
}

/* Tooltip system for ticket types */
.evey__variant-name {
  position: relative;
  cursor: help;
}

.evey__variant-name::after {
  content: '‚ÑπÔ∏è';
  font-size: 12px;
  margin-left: 6px;
  opacity: 0.7;
}

.evey__variant-container:hover .ticket-tooltip:not(.tooltip-disabled) {
  opacity: 1;
  visibility: visible;
  transform: translateX(-50%) translateY(0);
}

.ticket-tooltip {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) translateY(-10px);
  min-width: 320px;
  max-width: 450px;
  background: rgba(0, 0, 0, 0.95);
  color: white;
  padding: 20px;
  border-radius: 16px;
  font-size: 15px;
  line-height: 1.6;
  z-index: 10000;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
  box-shadow: 0 12px 48px rgba(0,0,0,0.6);
  border: 2px solid rgba(255,179,0,0.4);
  white-space: normal;
}

/* Disable tooltips when clicking quantity buttons */
.evey__variant-container.tooltip-disabled .ticket-tooltip {
  display: none !important;
}

.ticket-tooltip::before {
  content: '';
  position: absolute;
  bottom: -12px;
  left: 50%;
  transform: translateX(-50%);
  border: 8px solid transparent;
  border-top-color: rgba(0, 0, 0, 0.95);
}

/* Tooltip close button */
.tooltip-close {
  position: absolute;
  top: 8px;
  right: 12px;
  background: rgba(255, 179, 0, 0.8);
  border: none;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  color: #0d1b0f;
  font-size: 16px;
  font-weight: 700;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  line-height: 1;
  transition: all 0.2s ease;
}

.tooltip-close:hover {
  background: #d32f2f;
  color: white;
  transform: scale(1.1);
}

.tooltip-content {
  padding-right: 30px;
}

/* Prevent flash of old content */
.sketch-card.seed-9 {
  opacity: 1;
  transition: opacity 0.3s ease;
}

.open-ticket-loading {
  opacity: 0.5 !important;
}

/* Enhanced Open Ticket responsive design */
@media screen and (max-width: 768px) {
  .open-ticket-card .open-form-content {
    flex-direction: column !important;
    align-items: center !important;
    text-align: center;
    gap: 1rem !important;
  }
  
  .open-ticket-card .open-image {
    align-self: center;
  }
  
  .open-ticket-card .open-header {
    justify-content: center !important;
  }
  
  .open-ticket-card .open-pricing {
    justify-content: center !important;
  }
  
  .open-ticket-card .open-actions {
    justify-content: center !important;
    width: 100%;
  }
  
  .open-ticket-card .qty-selector {
    min-width: 120px;
  }
  
  .open-ticket-card #open-add-to-cart {
    min-width: 160px !important;
  }
}

@media screen and (max-width: 480px) {
  .open-ticket-card {
    padding: 1rem !important;
    margin: 1rem 0 !important;
  }
  
  .open-ticket-card .open-actions {
    flex-direction: column !important;
    gap: 0.75rem !important;
  }
  
  .open-ticket-card #open-add-to-cart {
    width: 100% !important;
    min-width: unset !important;
  }
}
</style>