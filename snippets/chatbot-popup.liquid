<!-- CHATBOT POPUP v4.0 - AGGIORNATO 21/10/2025 - Nuovo backend chatbot-lucy-2025 -->
<style>
/* Chatbot Popup Styles - Aligned with theme */
:root {
  --christmas-red: #dc2626;
  --christmas-green: #059669;
  --christmas-gold: #f59e0b;
  --christmas-cream: #fef7ed;
  --background-dark: #1a1a1a;
  --text-light: #ffffff;
  --text-gray: #e5e7eb;
}

.chatbot-container {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 9999;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Arial, Helvetica, sans-serif;
}

/* Chat Bubble */
.chat-bubble {
  width: 60px;
  height: 60px;
  background: rgba(255, 255, 255, 0.1);
  border: 2px solid rgba(255, 255, 255, 0.3);
  backdrop-filter: blur(10px);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 20px rgba(0,0,0,0.3);
  transition: all 0.3s ease;
  position: relative;
}

.chat-bubble:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.chat-bubble-icon {
  width: 28px;
  height: 28px;
  fill: white;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

/* Chat Popup */
.chat-popup {
  position: absolute;
  bottom: 80px;
  right: 0;
  width: 400px;
  height: 600px;
  background: rgba(26, 26, 26, 0.95);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  box-shadow: 0 10px 40px rgba(0,0,0,0.4);
  border: 2px solid rgba(5, 150, 105, 0.3);
  display: none;
  flex-direction: column;
  overflow: hidden;
  animation: slideUp 0.3s ease;
}

@keyframes slideUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.chat-popup.show {
  display: flex;
}

/* Header */
.chat-header {
  background: var(--christmas-red);
  color: white;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-title {
  font-size: 1.125rem;
  font-weight: normal;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.chat-close {
  background: none;
  border: none;
  color: white;
  font-size: 24px;
  cursor: pointer;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background 0.2s;
}

.chat-close:hover {
  background: rgba(255,255,255,0.15);
}

/* Messages */
.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  background: rgba(26, 26, 26, 0.8);
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.chat-message {
  display: flex;
  flex-direction: column;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.chat-message.user {
  align-items: flex-end;
}

.chat-message.bot,
.chat-message.ai {
  align-items: flex-start;
}

.message-bubble {
  max-width: 80%;
  padding: 0.75rem 1rem;
  border-radius: 18px;
  font-size: 1rem;
  line-height: 1.6;
  word-wrap: break-word;
}

.user .message-bubble {
  background: var(--christmas-green);
  color: white;
  border-bottom-right-radius: 6px;
}

.bot .message-bubble,
.ai .message-bubble {
  background: var(--christmas-green);
  color: white;
  border-bottom-left-radius: 6px;
}

.operator .message-bubble {
  background: linear-gradient(135deg, #10B981, #059669);
  color: white;
  border-bottom-left-radius: 6px;
  border-left: 3px solid #34D399;
}

/* Input */
.chat-input-container {
  padding: 1rem;
  background: rgba(26, 26, 26, 0.9);
  border-top: 1px solid rgba(255,255,255,0.1);
}

.chat-input-group {
  display: flex;
  gap: 0.5rem;
}

.chat-input-field {
  flex: 1;
  background: rgba(45, 45, 45, 0.8);
  border: 1px solid rgba(255,255,255,0.3);
  color: white;
  padding: 0.75rem;
  border-radius: 20px;
  font-size: 1rem;
  resize: none;
  max-height: 100px;
  font-family: inherit;
}

.chat-input-field:focus {
  outline: none;
  border-color: var(--christmas-green);
}

.chat-send-button {
  background: var(--christmas-red);
  border: none;
  color: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s;
}

.chat-send-button:hover:not(:disabled) {
  background: var(--christmas-green);
  transform: scale(1.1);
}

.chat-send-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Mobile */
@media (max-width: 768px) {
  .chat-popup {
    width: 100%;
    height: 100%;
    bottom: 0;
    border-radius: 0;
  }
}
</style>

<!-- Chatbot Container -->
<div class="chatbot-container" id="chatbotContainer">
  <!-- Chat Bubble -->
  <div class="chat-bubble" id="chatBubble">
    <div class="chat-bubble-icon">
      <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
      </svg>
    </div>
  </div>

  <!-- Chat Popup -->
  <div class="chat-popup" id="chatPopup">
    <!-- Header -->
    <div class="chat-header">
      <div class="chat-title">LUCY - ASSISTENTE VIRTUALE</div>
      <button class="chat-close" id="chatClose">√ó</button>
    </div>

    <!-- Messages -->
    <div class="chat-messages" id="chatMessages">
      <div class="chat-message bot">
        <div class="message-bubble">
          Ciao! Sono Lucy, il tuo assistente virtuale üëã
        </div>
      </div>
      <div class="chat-message bot">
        <div class="message-bubble">
          Come posso aiutarti oggi?
        </div>
      </div>
    </div>

    <!-- Input -->
    <div class="chat-input-container">
      <div class="chat-input-group">
        <textarea
          class="chat-input-field"
          id="chatInputField"
          placeholder="Scrivi la tua domanda..."
          rows="1"
        ></textarea>
        <button class="chat-send-button" id="chatSendButton">
          üì§
        </button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('ü§ñ Chatbot v4.0 - Nuovo backend');

  const container = document.getElementById('chatbotContainer');
  const bubble = document.getElementById('chatBubble');
  const popup = document.getElementById('chatPopup');
  const closeBtn = document.getElementById('chatClose');
  const input = document.getElementById('chatInputField');
  const sendBtn = document.getElementById('chatSendButton');
  const messagesContainer = document.getElementById('chatMessages');

  // ‚úÖ NUOVO BACKEND
  const API_URL = 'https://chatbot-lucy-2025.onrender.com/api';
  const WS_URL = 'https://chatbot-lucy-2025.onrender.com';

  let sessionId = null;
  let isPopupOpen = false;
  let socket = null;

  // Event Listeners
  bubble.addEventListener('click', togglePopup);
  closeBtn.addEventListener('click', closePopup);
  sendBtn.addEventListener('click', sendMessage);
  input.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  function togglePopup() {
    if (isPopupOpen) {
      closePopup();
    } else {
      openPopup();
    }
  }

  function openPopup() {
    popup.classList.add('show');
    isPopupOpen = true;
    input.focus();

    // Connect WebSocket se non gi√† connesso
    if (!socket && sessionId) {
      connectWebSocket();
    }
  }

  function closePopup() {
    popup.classList.remove('show');
    isPopupOpen = false;
  }

  async function sendMessage() {
    const message = input.value.trim();
    if (!message) return;

    // Aggiungi messaggio utente
    addMessage(message, 'user');
    input.value = '';

    // Disabilita input
    setInputState(false);

    try {
      if (!sessionId) {
        // ‚úÖ Crea nuova sessione
        const sessionResponse = await fetch(`${API_URL}/chat/sessions`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userName: 'Ospite',
            userAgent: navigator.userAgent
          })
        });

        const sessionData = await sessionResponse.json();
        sessionId = sessionData.data?.id;
        console.log('‚úÖ Session created:', sessionId);

        // Connect WebSocket
        connectWebSocket();
      }

      // ‚úÖ Invia messaggio
      const response = await fetch(`${API_URL}/chat/sessions/${sessionId}/messages`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content: message })
      });

      const data = await response.json();

      if (data.success) {
        // Il messaggio AI arriver√† via WebSocket
        console.log('‚úÖ Message sent');
      } else {
        addMessage('Mi dispiace, c\'√® stato un errore. Riprova.', 'bot');
      }

    } catch (error) {
      console.error('‚ùå Error:', error);
      addMessage('Errore di connessione. Riprova.', 'bot');
    } finally {
      setInputState(true);
      input.focus();
    }
  }

  function connectWebSocket() {
    if (socket) return;

    console.log('üîå Connecting WebSocket...');
    socket = io(WS_URL);

    socket.on('connect', () => {
      console.log('‚úÖ WebSocket connected');
      // Join chat room
      socket.emit('join_chat', { sessionId: sessionId });
    });

    socket.on('new_message', (data) => {
      console.log('üì® New message:', data);
      if (data.message) {
        const type = data.message.type || 'ai';
        addMessage(data.message.content, type);
      }
    });

    socket.on('operator_joined', (data) => {
      console.log('üë§ Operator joined');
      addMessage('Un operatore si √® unito alla chat!', 'system');
    });

    socket.on('disconnect', () => {
      console.log('‚ùå WebSocket disconnected');
      socket = null;
    });
  }

  function addMessage(text, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${sender}`;

    const bubbleDiv = document.createElement('div');
    bubbleDiv.className = 'message-bubble';
    bubbleDiv.textContent = text;

    messageDiv.appendChild(bubbleDiv);
    messagesContainer.appendChild(messageDiv);

    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function setInputState(enabled) {
    input.disabled = !enabled;
    sendBtn.disabled = !enabled;
  }
});
</script>
