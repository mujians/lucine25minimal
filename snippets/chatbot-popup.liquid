<!-- CHATBOT POPUP - Solo con ?chatbot=test -->
<style>
/* Chatbot Popup Styles */
.chatbot-container {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 9999;
  font-family: 'Providence Sans', -apple-system, sans-serif;
}

/* Chat Bubble */
.chat-bubble {
  width: 60px;
  height: 60px;
  background: var(--christmas-red);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 20px rgba(0,0,0,0.3);
  transition: all 0.3s ease;
  position: relative;
}

.chat-bubble:hover {
  transform: scale(1.1);
  box-shadow: 0 6px 25px rgba(0,0,0,0.4);
}

.chat-bubble-icon {
  width: 28px;
  height: 28px;
  fill: white;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

/* Notification Badge */
.chat-notification {
  position: absolute;
  top: -8px;
  right: -8px;
  background: var(--christmas-gold);
  color: var(--christmas-red);
  border-radius: 50%;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  font-weight: bold;
  animation: bounce 1s infinite;
}

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
  40% { transform: translateY(-5px); }
  60% { transform: translateY(-3px); }
}

/* Chat Popup */
.chat-popup {
  position: absolute;
  bottom: 80px;
  right: 0;
  width: 350px;
  height: 500px;
  background: #1a1a1a;
  border-radius: 20px;
  box-shadow: 0 10px 40px rgba(0,0,0,0.4);
  border: 2px solid var(--christmas-green);
  display: none;
  flex-direction: column;
  overflow: hidden;
  animation: slideUp 0.3s ease;
}

@keyframes slideUp {
  from { 
    opacity: 0; 
    transform: translateY(20px) scale(0.95); 
  }
  to { 
    opacity: 1; 
    transform: translateY(0) scale(1); 
  }
}

.chat-popup.show {
  display: flex;
}

/* Popup Header */
.chat-header {
  background: var(--christmas-red);
  color: white;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-title {
  font-size: 1.1rem;
  font-weight: 600;
}

.chat-close {
  background: none;
  border: none;
  color: white;
  font-size: 20px;
  cursor: pointer;
  padding: 0;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s;
}

.chat-close:hover {
  background: rgba(255,255,255,0.2);
}

/* Messages Area */
.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  background: #1a1a1a;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.chat-message {
  display: flex;
  flex-direction: column;
  animation: fadeInMessage 0.3s ease;
}

@keyframes fadeInMessage {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.chat-message.user {
  align-items: flex-end;
}

.chat-message.bot {
  align-items: flex-start;
}

.message-bubble {
  max-width: 80%;
  padding: 0.75rem 1rem;
  border-radius: 18px;
  font-size: 0.95rem;
  line-height: 1.4;
  word-wrap: break-word;
}

.user .message-bubble {
  background: var(--christmas-gold);
  color: var(--background-dark);
  border-bottom-right-radius: 6px;
}

.bot .message-bubble {
  background: var(--christmas-green);
  color: white;
  border-bottom-left-radius: 6px;
}

/* Welcome Message */
.chat-welcome {
  text-align: center;
  padding: 2rem 1rem;
  color: var(--text-gray);
}

.chat-welcome h4 {
  color: var(--christmas-green);
  font-size: 1.2rem;
  margin-bottom: 0.5rem;
}

/* Input Area */
.chat-input-container {
  padding: 1rem;
  background: #1a1a1a;
  border-top: 1px solid rgba(255,255,255,0.1);
}

.chat-input-group {
  display: flex;
  gap: 0.5rem;
  align-items: flex-end;
}

.chat-input-field {
  flex: 1;
  background: #2d2d2d;
  border: 1px solid rgba(255,255,255,0.3);
  color: white;
  padding: 0.75rem;
  border-radius: 20px;
  font-size: 0.95rem;
  resize: none;
  max-height: 100px;
  min-height: 40px;
  font-family: inherit;
}

.chat-input-field:focus {
  outline: none;
  border-color: var(--christmas-green);
  background: #3d3d3d;
}

.chat-input-field::placeholder {
  color: rgba(255,255,255,0.6);
}

.chat-send-button {
  background: var(--christmas-red);
  border: none;
  color: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s;
  flex-shrink: 0;
}

.chat-send-button:hover:not(:disabled) {
  background: var(--christmas-green);
  transform: scale(1.1);
}

.chat-send-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Typing Indicator */
.typing-indicator {
  display: none;
  padding: 0.5rem 1rem;
  color: var(--text-gray);
  font-style: italic;
  font-size: 0.9rem;
}

.typing-indicator.show {
  display: block;
}

.typing-dots {
  display: inline-block;
}

.typing-dots span {
  animation: typingDot 1.4s infinite;
  font-size: 1.2em;
}

.typing-dots span:nth-child(1) { animation-delay: 0s; }
.typing-dots span:nth-child(2) { animation-delay: 0.2s; }
.typing-dots span:nth-child(3) { animation-delay: 0.4s; }

@keyframes typingDot {
  0%, 60%, 100% { opacity: 0.3; }
  30% { opacity: 1; }
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .chat-popup {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    border-radius: 0;
    animation: slideUpMobile 0.3s ease;
  }
  
  @keyframes slideUpMobile {
    from { transform: translateY(100%); }
    to { transform: translateY(0); }
  }
  
  .chatbot-container {
    bottom: 15px;
    right: 15px;
  }
  
  .chat-bubble {
    width: 55px;
    height: 55px;
  }
}

/* Suggestions */
.chat-suggestions {
  padding: 1rem;
  border-top: 1px solid rgba(255,255,255,0.1);
}

.suggestions-grid {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.suggestion-button {
  background: var(--christmas-red);
  border: none;
  color: white;
  padding: 0.75rem 1rem;
  border-radius: 10px;
  font-size: 0.95rem;
  cursor: pointer;
  transition: all 0.2s;
  font-family: inherit;
  font-weight: 500;
  text-align: left;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.suggestion-button:hover {
  background: var(--christmas-green);
  transform: translateY(-1px);
}
/* Chat Links */
.chat-link {
  display: inline-block;
  padding: 8px 16px;
  margin: 4px 2px;
  border-radius: 20px;
  text-decoration: none;
  font-weight: 600;
  font-size: 14px;
  transition: all 0.3s ease;
  border: 2px solid transparent;
  cursor: pointer;
}

.chat-link:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  text-decoration: none;
}

.product-link {
  background: linear-gradient(135deg, var(--christmas-red), #d32f2f);
  color: white;
  border-color: var(--christmas-red);
}

.product-link:hover {
  background: linear-gradient(135deg, #d32f2f, var(--christmas-red));
  color: white;
  border-color: #d32f2f;
}

.cart-link {
  background: linear-gradient(135deg, var(--christmas-gold), #f57c00);
  color: var(--christmas-red);
  border-color: var(--christmas-gold);
}

.cart-link:hover {
  background: linear-gradient(135deg, #f57c00, var(--christmas-gold));
  color: var(--christmas-red);
  border-color: #f57c00;
}

.email-link {
  background: linear-gradient(135deg, #4CAF50, #45a049);
  color: white;
  border-color: #4CAF50;
}

.email-link:hover {
  background: linear-gradient(135deg, #45a049, #4CAF50);
  color: white;
  border-color: #45a049;
}

.whatsapp-link {
  background: linear-gradient(135deg, #25D366, #128C7E);
  color: white;
  border-color: #25D366;
}

.whatsapp-link:hover {
  background: linear-gradient(135deg, #128C7E, #25D366);
  color: white;
  border-color: #128C7E;
}

.chat-link:active {
  transform: translateY(0);
}

/* Smart Actions */
.smart-actions-container {
  margin: 1rem 0;
  padding: 0 1rem;
}

.smart-actions-grid {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.smart-action-button {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  border: none;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: left;
  font-family: inherit;
  width: 100%;
  background: transparent;
  border: 2px solid;
}

.smart-action-button.primary {
  background: linear-gradient(135deg, var(--christmas-red), #d32f2f);
  color: white;
  border-color: var(--christmas-red);
}

.smart-action-button.success {
  background: linear-gradient(135deg, var(--christmas-gold), #f57c00);
  color: var(--christmas-red);
  border-color: var(--christmas-gold);
}

.smart-action-button.info {
  background: linear-gradient(135deg, #2196F3, #1976D2);
  color: white;
  border-color: #2196F3;
}

.smart-action-button.secondary {
  background: linear-gradient(135deg, #666, #555);
  color: white;
  border-color: #666;
}

.smart-action-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0,0,0,0.2);
}

.smart-action-button:active {
  transform: translateY(0);
}

.action-icon {
  font-size: 1.5rem;
  flex-shrink: 0;
}

.action-content {
  flex: 1;
  min-width: 0;
}

.action-text {
  font-weight: 600;
  font-size: 1rem;
  margin-bottom: 0.25rem;
}

.action-description {
  font-size: 0.85rem;
  opacity: 0.8;
  line-height: 1.2;
}

/* Responsive */
@media (max-width: 380px) {
  .smart-action-button {
    padding: 0.75rem;
    gap: 0.75rem;
  }
  
  .action-icon {
    font-size: 1.25rem;
  }
  
  .action-text {
    font-size: 0.9rem;
  }
  
  .action-description {
    font-size: 0.8rem;
  }
}

</style>

<!-- Chatbot Container -->
<div class="chatbot-container" id="chatbotContainer" style="display: none;">
  <!-- Chat Bubble -->
  <div class="chat-bubble" id="chatBubble">
    <div class="chat-bubble-icon">
      <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
      </svg>
    </div>
    <div class="chat-notification" id="chatNotification" style="display: none;">1</div>
  </div>

  <!-- Chat Popup -->
  <div class="chat-popup" id="chatPopup">
    <!-- Header -->
    <div class="chat-header">
      <div class="chat-title">
        <svg width="20" height="20" viewBox="0 0 24 24" style="fill: white; margin-right: 8px; vertical-align: text-bottom;">
          <path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
        </svg>
        Lucy - Assistente Virtuale
      </div>
      <button class="chat-close" id="chatClose">×</button>
    </div>

    <!-- Messages -->
    <div class="chat-messages" id="chatMessages">
      <div class="chat-welcome">
        <h4>Ciao! Sono Lucy, il tuo assistente virtuale. 👋</h4>
        <p>Chiedimi quello che vuoi sapere.<br>Se non troviamo una risposta, ti metterò in contatto con un operatore!</p>
      </div>
    </div>

    <!-- Typing Indicator -->
    <div class="typing-indicator" id="typingIndicator">
      L'assistente sta scrivendo<span class="typing-dots"><span>.</span><span>.</span><span>.</span></span>
    </div>

    <!-- Suggestions -->
    <div class="chat-suggestions" id="chatSuggestions" style="display: none;">
      <div class="suggestions-grid" id="suggestionsGrid"></div>
    </div>

    <!-- Input -->
    <div class="chat-input-container">
      <div class="chat-input-group">
        <textarea 
          class="chat-input-field" 
          id="chatInputField" 
          placeholder="Scrivi la tua domanda..."
          rows="1"
        ></textarea>
        <button class="chat-send-button" id="chatSendButton">
          📤
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// Inizializza chatbot solo se c'è il parametro URL
document.addEventListener('DOMContentLoaded', function() {
  const urlParams = new URLSearchParams(window.location.search);
  
  if (urlParams.get('chatbot') === 'test') {
    initializeChatbot();
  }
});

function initializeChatbot() {
  const container = document.getElementById('chatbotContainer');
  const bubble = document.getElementById('chatBubble');
  const popup = document.getElementById('chatPopup');
  const closeBtn = document.getElementById('chatClose');
  const input = document.getElementById('chatInputField');
  const sendBtn = document.getElementById('chatSendButton');
  const messagesContainer = document.getElementById('chatMessages');
  const typingIndicator = document.getElementById('typingIndicator');
  const notification = document.getElementById('chatNotification');

  // Mostra il container
  container.style.display = 'block';

  // Configurazione
  const BACKEND_URL = 'https://chatbot-backend-aicwwsgq5-brunos-projects-075c84f2.vercel.app/api/chat';
  let sessionId = generateSessionId();
  let isPopupOpen = false;

  // Event Listeners
  bubble.addEventListener('click', togglePopup);
  closeBtn.addEventListener('click', closePopup);
  sendBtn.addEventListener('click', sendMessage);
  input.addEventListener('keypress', handleKeyPress);
  input.addEventListener('input', autoResize);

  // Mostra notifica dopo 3 secondi
  setTimeout(() => {
    if (!isPopupOpen) {
      notification.style.display = 'flex';
    }
  }, 3000);

  function togglePopup() {
    if (isPopupOpen) {
      closePopup();
    } else {
      openPopup();
    }
  }

  function openPopup() {
    popup.classList.add('show');
    isPopupOpen = true;
    notification.style.display = 'none';
    setTimeout(() => input.focus(), 300);
  }

  function closePopup() {
    popup.classList.remove('show');
    isPopupOpen = false;
  }

  function handleKeyPress(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  }

  function autoResize() {
    input.style.height = 'auto';
    input.style.height = Math.min(input.scrollHeight, 100) + 'px';
  }

  async function sendMessage(messageText) {
    const message = messageText || input.value.trim();
    if (!message) return;

    // Rimuovi welcome se presente
    const welcome = messagesContainer.querySelector('.chat-welcome');
    if (welcome) welcome.remove();

    // Rimuovi suggerimenti
    hideSuggestions();

    // Aggiungi messaggio utente
    addMessage(message, 'user');
    
    // Reset input
    input.value = '';
    input.style.height = 'auto';
    
    // Disabilita input durante invio
    setInputState(false);
    showTyping();

    try {
      const response = await fetch(BACKEND_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Session-ID': sessionId
        },
        body: JSON.stringify({
          message: message,
          sessionId: sessionId
        })
      });

      const data = await response.json();

      if (data.error) {
        throw new Error(data.error);
      }

      // Aggiorna sessionId
      if (data.sessionId) {
        sessionId = data.sessionId;
      }

      // Aggiungi risposta bot
      addMessage(data.reply, 'bot');

      // Mostra smart actions se presenti
      if (data.smartActions && data.smartActions.length > 0) {
        showSmartActions(data.smartActions);
      }

      // Mostra suggerimenti se presenti
      if (data.suggestions && data.suggestions.length > 0) {
        showSuggestions(data.suggestions);
      }

    } catch (error) {
      addMessage('Mi dispiace, c\'è stato un problema di connessione. Prova di nuovo o contatta info@lucinedinatale.it', 'bot');
      console.error('Chat Error:', error);
    } finally {
      hideTyping();
      setInputState(true);
      input.focus();
    }
  }

  function addMessage(text, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${sender}`;
    
    const bubbleDiv = document.createElement('div');
    bubbleDiv.className = 'message-bubble';
    
    // Processa il testo per rendere i link cliccabili e belli
    let processedText = escapeHtml(text);
    
    // Converte URL in link cliccabili con beauty text
    processedText = processedText.replace(
      /(https?:\/\/lucinedinatale\.it\/products\/[^\s]+)/g, 
      '<a href="$1" target="_blank" class="chat-link product-link">🎫 Prenota biglietti</a>'
    );
    
    // Altri link generici (carrello, etc)
    processedText = processedText.replace(
      /(https?:\/\/lucinedinatale\.it\/cart[^\s]*)/g, 
      '<a href="$1" target="_blank" class="chat-link cart-link">🛒 Vai al carrello</a>'
    );
    
    // Email links
    processedText = processedText.replace(
      /(info@lucinedinatale\.it)/g,
      '<a href="mailto:$1" class="chat-link email-link">📧 $1</a>'
    );
    
    // WhatsApp links
    processedText = processedText.replace(
      /(https?:\/\/wa\.me\/[^\s]+)/g,
      '<a href="$1" target="_blank" class="chat-link whatsapp-link">📱 Contatta WhatsApp</a>'
    );
    
    // Altri link generici
    processedText = processedText.replace(
      /(https?:\/\/[^\s]+)/g,
      '<a href="$1" target="_blank" class="chat-link">🔗 Apri link</a>'
    );
    
    // Converte line breaks
    processedText = processedText.replace(/\n\n/g, '<br><br>');
    processedText = processedText.replace(/\n/g, '<br>');
    
    bubbleDiv.innerHTML = processedText;
    
    messageDiv.appendChild(bubbleDiv);
    messagesContainer.appendChild(messageDiv);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function showSuggestions(suggestions) {
    const suggestionsContainer = document.getElementById('chatSuggestions');
    const suggestionsGrid = document.getElementById('suggestionsGrid');
    
    suggestionsGrid.innerHTML = suggestions.map(suggestion => 
      `<button class="suggestion-button" onclick="sendMessage('${escapeHtml(suggestion)}')">${escapeHtml(suggestion)}</button>`
    ).join('');
    
    suggestionsContainer.style.display = 'block';
  }

  function hideSuggestions() {
    document.getElementById('chatSuggestions').style.display = 'none';
  }

  function showSmartActions(actions) {
    // Rimuovi smart actions precedenti
    const existingActions = document.querySelector('.smart-actions-container');
    if (existingActions) {
      existingActions.remove();
    }

    if (!actions || actions.length === 0) return;

    // Crea container smart actions
    const actionsContainer = document.createElement('div');
    actionsContainer.className = 'smart-actions-container';
    
    const actionsGrid = document.createElement('div');
    actionsGrid.className = 'smart-actions-grid';
    
    actions.forEach(action => {
      const actionButton = document.createElement('button');
      actionButton.className = `smart-action-button ${action.type}`;
      
      actionButton.innerHTML = `
        <div class="action-icon">${action.icon}</div>
        <div class="action-content">
          <div class="action-text">${action.text}</div>
          <div class="action-description">${action.description}</div>
        </div>
      `;
      
      actionButton.addEventListener('click', () => {
        if (action.url) {
          window.open(action.url, '_blank');
        } else if (action.action === 'whatsapp_signup') {
          sendMessage('voglio attivare notifiche whatsapp');
        }
        actionsContainer.remove();
      });
      
      actionsGrid.appendChild(actionButton);
    });
    
    actionsContainer.appendChild(actionsGrid);
    messagesContainer.appendChild(actionsContainer);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function showTyping() {
    typingIndicator.classList.add('show');
  }

  function hideTyping() {
    typingIndicator.classList.remove('show');
  }

  function setInputState(enabled) {
    input.disabled = !enabled;
    sendBtn.disabled = !enabled;
  }

  function generateSessionId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Esponi sendMessage globalmente per i suggerimenti
  window.sendMessage = sendMessage;

  // Funzione per aggiungere prodotti al carrello
  window.addToCart = function(variantId, quantity = 1) {
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id: variantId,
        quantity: quantity
      })
    })
    .then(response => response.json())
    .then(data => {
      // Aggiorna il contatore del carrello
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          // Aggiorna UI del carrello se presente
          const cartCount = document.querySelector('.cart-count');
          if (cartCount) {
            cartCount.textContent = cart.item_count;
          }
          
          // Messaggio di conferma nel chat
          addMessage(`✅ Prodotto aggiunto al carrello! Ora hai ${cart.item_count} articoli.`, 'bot');
        });
    })
    .catch(error => {
      addMessage('❌ Errore nell\'aggiungere il prodotto al carrello. Riprova!', 'bot');
      console.error('Error adding to cart:', error);
    });
  };
}
</script>