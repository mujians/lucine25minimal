<!-- CHATBOT POPUP v4.1 - UPDATED 23/10/2025 - Dynamic Settings + Socket.IO Real-time + New API Endpoints - Compatible with chatbot-lucy-2025 backend -->
<!-- ✨ NEW: Loads widget configuration (colors, position, greeting) from dashboard settings via /api/settings/public -->

<!-- Socket.IO Client CDN -->
<script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>

<style>
/* Chatbot Popup Styles - Aligned with theme */
:root {
  --christmas-red: #dc2626;    /* rosso natalizio */
  --christmas-green: #059669;  /* verde abete */
  --christmas-gold: #f59e0b;   /* oro natalizio */
  --christmas-cream: #fef7ed;  /* crema natalizia */
  --background-dark: #1a1a1a;  /* sfondo scuro */
  --text-light: #ffffff;       /* testo bianco */
  --text-gray: #e5e7eb;        /* testo grigio chiaro */
}

.chatbot-container {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 9999;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Arial, Helvetica, sans-serif;
}

/* Chat Bubble - Theme Aligned */
.chat-bubble {
  width: 60px;
  height: 60px;
  background: rgba(255, 255, 255, 0.1);
  border: 2px solid rgba(255, 255, 255, 0.3);
  backdrop-filter: blur(10px);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 20px rgba(0,0,0,0.3);
  transition: all 0.3s ease;
  position: relative;
}

.chat-bubble:hover {
  background: rgba(255, 255, 255, 0.2);
  border-color: rgba(255, 255, 255, 0.5);
  transform: scale(1.05);
  box-shadow: 0 6px 25px rgba(0,0,0,0.4);
}

.chat-bubble-icon {
  width: 28px;
  height: 28px;
  fill: white;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

/* Notification Badge */
.chat-notification {
  position: absolute;
  top: -8px;
  right: -8px;
  background: var(--christmas-gold);
  color: var(--christmas-red);
  border-radius: 50%;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  font-weight: bold;
  animation: bounce 1s infinite;
}

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
  40% { transform: translateY(-5px); }
  60% { transform: translateY(-3px); }
}

/* Chat Popup */
.chat-popup {
  position: absolute;
  bottom: 80px;
  right: 0;
  width: 400px;
  height: 600px;
  background: rgba(26, 26, 26, 0.95);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  box-shadow: 0 10px 40px rgba(0,0,0,0.4);
  border: 2px solid rgba(5, 150, 105, 0.3);
  display: none;
  flex-direction: column;
  overflow: hidden;
  animation: slideUp 0.3s ease;
}

/* Mobile responsive */
@media (max-width: 480px) {
  .chat-popup {
    width: calc(100vw - 40px);
    height: calc(100vh - 120px);
    bottom: 80px;
    right: 20px;
    left: 20px;
  }

  .chat-popup.expanded {
    width: 100vw;
    height: 100vh;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    border-radius: 0;
    border: none;
  }
}

/* Desktop expanded mode */
@media (min-width: 768px) {
  .chat-popup.expanded {
    background: rgba(26, 26, 26, 0.98);
    backdrop-filter: blur(30px);
    border: 2px solid rgba(5, 150, 105, 0.4);
    box-shadow: 0 20px 60px rgba(0,0,0,0.5);
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.chat-popup.show {
  display: flex;
}

/* Popup Header */
.chat-header {
  background: var(--christmas-red);
  color: white;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-title {
  font-size: 1.125rem;
  font-weight: normal;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

/* Header controls */
.chat-controls {
  display: flex;
  gap: 8px;
}

.chat-close {
  background: none;
  border: none;
  color: var(--text-light);
  font-size: 18px;
  cursor: pointer;
  padding: 0;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.chat-close:hover {
  background: rgba(255,255,255,0.15);
  transform: scale(1.05);
}

/* Messages Area */
.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  background: rgba(26, 26, 26, 0.8);
  backdrop-filter: blur(10px);
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.chat-message {
  display: flex;
  flex-direction: column;
  animation: fadeInMessage 0.3s ease;
}

@keyframes fadeInMessage {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* P0.5: Typing indicator animation */
.typing-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: #666;
  animation: typingDot 1.4s infinite;
}

.typing-dot:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-dot:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes typingDot {
  0%, 60%, 100% { transform: translateY(0); opacity: 0.7; }
  30% { transform: translateY(-10px); opacity: 1; }
}

.chat-message.user {
  align-items: flex-end;
}

.chat-message.bot {
  align-items: flex-start;
}

.chat-message.operator {
  align-items: flex-start;
}

.chat-message.system {
  align-items: center;
}

.message-bubble {
  max-width: 80%;
  padding: 0.75rem 1rem;
  border-radius: 18px;
  font-size: 1rem !important;
  line-height: 1.6 !important;
  word-wrap: break-word;
  font-weight: 400 !important;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !important;
}

.message-bubble *, .message-bubble p, .message-bubble div, .message-bubble span {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !important;
  font-size: 1rem !important;
  line-height: 1.6 !important;
  font-weight: 400 !important;
}

.user .message-bubble {
  background: var(--christmas-green);
  color: white;
  border-bottom-right-radius: 6px;
}

.bot .message-bubble {
  background: var(--christmas-green);
  color: white;
  border-bottom-left-radius: 6px;
}

.operator .message-bubble {
  background: linear-gradient(135deg, #10B981, #059669);
  color: white;
  border-bottom-left-radius: 6px;
  border-left: 3px solid #34D399;
}

/* Operator name styling */
.operator-name {
  font-weight: 600;
  opacity: 0.9;
  font-size: 0.85em;
  margin-right: 0.4em;
  display: inline-block;
  padding: 2px 6px;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 4px;
}

.system .message-bubble {
  background: rgba(255, 255, 255, 0.1);
  color: var(--text-gray);
  border: 1px solid rgba(255, 255, 255, 0.2);
  font-size: 0.9rem !important;
  text-align: center;
  font-style: italic;
}

/* Input Area */
.chat-input-container {
  padding: 1rem;
  background: rgba(26, 26, 26, 0.9);
  backdrop-filter: blur(15px);
  border-top: 1px solid rgba(255,255,255,0.1);
}

.chat-input-group {
  display: flex;
  gap: 0.5rem;
  align-items: flex-end;
}

.chat-input-field {
  flex: 1;
  background: rgba(45, 45, 45, 0.8);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255,255,255,0.3);
  color: white;
  padding: 0.75rem;
  border-radius: 20px;
  font-size: 1rem;
  line-height: 1.4;
  resize: none;
  max-height: 100px;
  min-height: 40px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Arial, Helvetica, sans-serif;
}

.chat-input-field:focus {
  outline: none;
  border-color: var(--christmas-green);
  background: rgba(61, 61, 61, 0.9);
  backdrop-filter: blur(15px);
}

.chat-input-field::placeholder {
  color: rgba(255,255,255,0.6);
}

.chat-send-button {
  background: var(--christmas-red);
  border: none;
  color: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s;
  flex-shrink: 0;
}

.chat-send-button:hover:not(:disabled) {
  background: var(--christmas-green);
  transform: scale(1.1);
}

.chat-send-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Typing Indicator */
.typing-indicator {
  display: none;
  padding: 0.5rem 1rem;
  color: var(--text-gray);
  font-style: italic;
  font-size: 0.95rem;
  font-weight: 400;
  line-height: 1.4;
}

.typing-indicator.show {
  display: block;
}

.typing-dots {
  display: inline-block;
}

.typing-dots span {
  animation: typingDot 1.4s infinite;
  font-size: 1.2em;
}

.typing-dots span:nth-child(1) { animation-delay: 0s; }
.typing-dots span:nth-child(2) { animation-delay: 0.2s; }
.typing-dots span:nth-child(3) { animation-delay: 0.4s; }

@keyframes typingDot {
  0%, 60%, 100% { opacity: 0.3; }
  30% { opacity: 1; }
}

/* Chat Links */
.chat-link {
  display: inline-block;
  padding: 8px 16px;
  margin: 4px 2px;
  border-radius: 20px;
  text-decoration: none;
  font-weight: 600;
  font-size: 14px;
  transition: all 0.3s ease;
  border: 2px solid transparent;
  cursor: pointer;
}

.chat-link:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  text-decoration: none;
}

.product-link {
  background: linear-gradient(135deg, var(--christmas-red), #d32f2f);
  color: white;
  border-color: var(--christmas-red);
}

.product-link:hover {
  background: linear-gradient(135deg, #d32f2f, var(--christmas-red));
  color: white;
  border-color: #d32f2f;
}

.cart-link {
  background: linear-gradient(135deg, var(--christmas-gold), #f57c00);
  color: var(--christmas-red);
  border-color: var(--christmas-gold);
}

.cart-link:hover {
  background: linear-gradient(135deg, #f57c00, var(--christmas-gold));
  color: var(--christmas-red);
  border-color: #f57c00;
}

.email-link {
  background: linear-gradient(135deg, #4CAF50, #45a049);
  color: white;
  border-color: #4CAF50;
}

.email-link:hover {
  background: linear-gradient(135deg, #45a049, #4CAF50);
  color: white;
  border-color: #45a049;
}

.whatsapp-link {
  background: linear-gradient(135deg, #25D366, #128C7E);
  color: white;
  border-color: #25D366;
}

.whatsapp-link:hover {
  background: linear-gradient(135deg, #128C7E, #25D366);
  color: white;
  border-color: #128C7E;
}

/* Smart Actions */
.smart-actions-container {
  margin: 1rem 0;
  padding: 0 1rem;
}

.smart-actions-grid {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.smart-action-button {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  border: none;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: left;
  font-family: inherit;
  width: 100%;
  background: rgba(255, 255, 255, 0.1);
  border: 2px solid rgba(255, 255, 255, 0.3);
  color: var(--text-light);
}

.smart-action-button.primary {
  background: linear-gradient(135deg, var(--christmas-red), rgba(220, 38, 38, 0.8));
  backdrop-filter: blur(10px);
  color: white;
  border-color: var(--christmas-red);
  box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);
}

.smart-action-button.success {
  background: linear-gradient(135deg, var(--christmas-gold), rgba(245, 158, 11, 0.8));
  backdrop-filter: blur(10px);
  color: var(--background-dark);
  border-color: var(--christmas-gold);
  box-shadow: 0 4px 15px rgba(245, 158, 11, 0.3);
}

.smart-action-button.info {
  background: linear-gradient(135deg, var(--christmas-green), rgba(5, 150, 105, 0.8));
  backdrop-filter: blur(10px);
  color: white;
  border-color: var(--christmas-green);
  box-shadow: 0 4px 15px rgba(5, 150, 105, 0.3);
}

.smart-action-button.secondary {
  background: linear-gradient(135deg, rgba(102, 102, 102, 0.8), rgba(85, 85, 85, 0.8));
  backdrop-filter: blur(10px);
  color: white;
  border-color: rgba(102, 102, 102, 0.6);
  box-shadow: 0 4px 15px rgba(102, 102, 102, 0.2);
}

.smart-action-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.3);
  backdrop-filter: blur(15px);
}

.smart-action-button:active {
  transform: translateY(0);
}

.action-icon {
  font-size: 1.5rem;
  flex-shrink: 0;
}

.action-content {
  flex: 1;
  min-width: 0;
}

.action-text {
  font-weight: normal;
  font-size: 1rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin-bottom: 0.25rem;
}

.action-description {
  font-size: 0.9rem;
  opacity: 0.8;
  line-height: 1.4;
  font-weight: 400;
}

/* Loading indicator */
.chat-loading-indicator {
  display: flex;
  justify-content: center;
  padding: 1rem;
  animation: fadeIn 0.2s ease-in;
}

.loading-content {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  background: #f0f0f0;
  padding: 0.75rem 1.25rem;
  border-radius: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.spinner {
  width: 16px;
  height: 16px;
  border: 2px solid #e0e0e0;
  border-top-color: #f4c430;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
}

.loading-text {
  font-size: 0.9rem;
  color: #666;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .chat-popup {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    border-radius: 0;
    animation: slideUpMobile 0.3s ease;
  }

  @keyframes slideUpMobile {
    from { transform: translateY(100%); }
    to { transform: translateY(0); }
  }

  .chatbot-container {
    bottom: 15px;
    right: 15px;
  }

  .chat-bubble {
    width: 55px;
    height: 55px;
  }
}

</style>

<!-- Chatbot Container -->
<div class="chatbot-container" id="chatbotContainer" style="display: none;">
  <!-- Chat Bubble -->
  <div class="chat-bubble" id="chatBubble">
    <div class="chat-bubble-icon">
      <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
      </svg>
    </div>
    <div class="chat-notification" id="chatNotification" style="display: none;">1</div>
  </div>

  <!-- Chat Popup -->
  <div class="chat-popup" id="chatPopup">
    <!-- Header -->
    <div class="chat-header">
      <div class="chat-title" style="font-family: 'Lucine di Natale', -apple-system, sans-serif; text-transform: uppercase;">
        LUCY - ASSISTENTE VIRTUALE
      </div>
      <div class="chat-controls">
        <button class="chat-close" id="chatClose" title="Chiudi chat">×</button>
      </div>
    </div>

    <!-- Messages -->
    <div class="chat-messages" id="chatMessages">
      <!-- Messaggi benvenuto già come bubble -->
      <div class="chat-message bot">
        <div class="message-bubble">
          Ciao! Sono Lucy, il tuo assistente virtuale. 👋
        </div>
      </div>
      <div class="chat-message bot">
        <div class="message-bubble">
          Chiedimi quello che vuoi sapere.<br>Se non troviamo una risposta, ti metterò in contatto con un operatore!
        </div>
      </div>
    </div>

    <!-- Typing Indicator -->
    <div class="typing-indicator" id="typingIndicator">
      L'assistente sta scrivendo<span class="typing-dots"><span>.</span><span>.</span><span>.</span></span>
    </div>

    <!-- Input -->
    <div class="chat-input-container">
      <div class="chat-input-group">
        <textarea
          class="chat-input-field"
          id="chatInputField"
          placeholder="Scrivi la tua domanda..."
          rows="1"
        ></textarea>
        <button class="chat-send-button" id="chatSendButton">
          📤
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// Inizializza chatbot solo se c'è il parametro URL
document.addEventListener('DOMContentLoaded', function() {
  const urlParams = new URLSearchParams(window.location.search);

  if (urlParams.get('chatbot') === 'test' || urlParams.get('pb') === '0') {
    initializeChatbot();
  }
});

function initializeChatbot() {
  console.log('🤖 Chatbot v4.1 - Dynamic Settings + Socket.IO');
  const container = document.getElementById('chatbotContainer');
  const bubble = document.getElementById('chatBubble');
  const popup = document.getElementById('chatPopup');
  const closeBtn = document.getElementById('chatClose');
  const input = document.getElementById('chatInputField');
  const sendBtn = document.getElementById('chatSendButton');
  const messagesContainer = document.getElementById('chatMessages');
  const typingIndicator = document.getElementById('typingIndicator');
  const notification = document.getElementById('chatNotification');

  // Configurazione - UPDATED ENDPOINTS
  const BACKEND_URL = 'https://chatbot-lucy-2025.onrender.com';
  const SOCKET_URL = 'https://chatbot-lucy-2025.onrender.com';

  // ✅ LOAD DYNAMIC SETTINGS FROM BACKEND
  let widgetSettings = {
    primaryColor: '#dc2626',
    position: 'bottom-right',
    greeting: 'Ciao! Sono Lucy, il tuo assistente virtuale. 👋',
    title: 'LUCY - ASSISTENTE VIRTUALE',
    subtitle: 'Chiedimi quello che vuoi sapere.'
  };

  // P2.1: Fetch settings from backend with cache busting
  async function loadWidgetSettings(skipCache = false) {
    try {
      console.log('⚙️ Loading widget settings...');

      // P2.1: Add cache-busting timestamp to prevent stale cached settings
      const cacheBuster = skipCache ? `?t=${Date.now()}` : '';
      const response = await fetch(`${BACKEND_URL}/api/settings/public${cacheBuster}`, {
        cache: skipCache ? 'no-cache' : 'default'
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.data) {
          // P2.1: Check if settings version changed
          const previousVersion = localStorage.getItem('widgetSettingsVersion');
          const newVersion = data.data.version;

          widgetSettings = { ...widgetSettings, ...data.data };
          console.log('✅ Settings loaded:', widgetSettings);

          // P2.1: Store version for change detection
          if (newVersion) {
            localStorage.setItem('widgetSettingsVersion', newVersion);

            // If version changed and widget was already loaded, reapply settings
            if (previousVersion && previousVersion !== String(newVersion)) {
              console.log('🔄 Settings version changed, reapplying...');
            }
          }

          applySettings();
        }
      } else {
        console.warn('⚠️ Failed to load settings, using defaults');
      }
    } catch (error) {
      console.error('❌ Error loading settings:', error);
      console.log('Using default settings');
    }
  }

  // P2.1: Auto-refresh settings every 5 minutes to catch dashboard changes
  function startSettingsAutoRefresh() {
    setInterval(() => {
      console.log('🔄 Auto-refreshing widget settings...');
      loadWidgetSettings(true); // Skip cache on auto-refresh
    }, 5 * 60 * 1000); // 5 minutes
  }

  // Apply settings to widget
  function applySettings() {
    // Apply primary color
    if (widgetSettings.primaryColor) {
      document.documentElement.style.setProperty('--christmas-red', widgetSettings.primaryColor);
      console.log('🎨 Applied primary color:', widgetSettings.primaryColor);
    }

    // Apply position
    if (widgetSettings.position) {
      const positions = {
        'bottom-right': { bottom: '20px', right: '20px', left: 'auto', top: 'auto' },
        'bottom-left': { bottom: '20px', left: '20px', right: 'auto', top: 'auto' },
        'top-right': { top: '20px', right: '20px', left: 'auto', bottom: 'auto' },
        'top-left': { top: '20px', left: '20px', right: 'auto', bottom: 'auto' }
      };

      const pos = positions[widgetSettings.position] || positions['bottom-right'];
      Object.assign(container.style, pos);
      console.log('📍 Applied position:', widgetSettings.position);
    }

    // Apply title
    if (widgetSettings.title) {
      const titleElement = document.querySelector('.chat-title');
      if (titleElement) {
        titleElement.textContent = widgetSettings.title.toUpperCase();
        console.log('📝 Applied title:', widgetSettings.title);
      }
    }

    // Update welcome messages
    updateWelcomeMessages();
  }

  // Update welcome messages with settings
  function updateWelcomeMessages() {
    const welcomeMessages = messagesContainer.querySelectorAll('.chat-message.bot');
    if (welcomeMessages.length >= 2 && widgetSettings.greeting && widgetSettings.subtitle) {
      welcomeMessages[0].querySelector('.message-bubble').textContent = widgetSettings.greeting;
      welcomeMessages[1].querySelector('.message-bubble').innerHTML = widgetSettings.subtitle;
      console.log('💬 Updated welcome messages');
    }
  }

  // Load settings immediately
  loadWidgetSettings();

  // P2.1: Start auto-refresh to keep settings updated
  startSettingsAutoRefresh();

  // Mostra il container
  container.style.display = 'block';

  // Session persistence constants
  const SESSION_STORAGE_KEY = 'lucine_chat_session_id';
  const SESSION_EXPIRY_KEY = 'lucine_chat_session_expiry';
  const SESSION_TTL = 24 * 60 * 60 * 1000; // 24 hours

  // Session persistence functions
  function loadSessionId() {
    try {
      const storedId = localStorage.getItem(SESSION_STORAGE_KEY);
      const expiry = localStorage.getItem(SESSION_EXPIRY_KEY);

      if (storedId && expiry) {
        const expiryDate = new Date(expiry);
        if (expiryDate > new Date()) {
          console.log('✅ Restored session from localStorage:', storedId);
          return storedId;
        } else {
          console.log('⚠️ Session expired, clearing storage');
          clearSessionStorage();
        }
      }
    } catch (error) {
      console.error('❌ Error loading session:', error);
    }
    return null;
  }

  function saveSessionId(id) {
    try {
      const expiry = new Date(Date.now() + SESSION_TTL);
      localStorage.setItem(SESSION_STORAGE_KEY, id);
      localStorage.setItem(SESSION_EXPIRY_KEY, expiry.toISOString());
      console.log('💾 Session saved to localStorage:', id);
    } catch (error) {
      console.error('❌ Error saving session:', error);
    }
  }

  function clearSessionStorage() {
    try {
      localStorage.removeItem(SESSION_STORAGE_KEY);
      localStorage.removeItem(SESSION_EXPIRY_KEY);
      console.log('🗑️ Session storage cleared');
    } catch (error) {
      console.error('❌ Error clearing session:', error);
    }
  }

  // Try to restore session from localStorage
  let sessionId = loadSessionId();

  let isPopupOpen = false;
  let isOperatorMode = false;
  let socket = null; // Socket.IO connection
  const displayedMessageIds = new Set(); // Track displayed messages globally

  // 🔗 Check if URL has ticket token for resume
  const urlParams = new URLSearchParams(window.location.search);
  const ticketToken = urlParams.get('ticket');
  if (ticketToken) {
    console.log('🎫 Ticket token found in URL:', ticketToken);
    resumeChatFromTicket(ticketToken);
  }

  // Event Listeners
  bubble.addEventListener('click', togglePopup);
  closeBtn.addEventListener('click', closePopup);
  sendBtn.addEventListener('click', () => sendMessage());
  input.addEventListener('keypress', handleKeyPress);
  input.addEventListener('input', autoResize);
  input.addEventListener('input', handleUserTyping); // P0.5: Typing indicator

  // Mostra notifica dopo 3 secondi
  setTimeout(() => {
    if (!isPopupOpen) {
      notification.style.display = 'flex';
    }
  }, 3000);

  function togglePopup() {
    if (isPopupOpen) {
      closePopup();
    } else {
      openPopup();
    }
  }

  function openPopup() {
    popup.classList.add('show');
    isPopupOpen = true;
    notification.style.display = 'none';

    setTimeout(() => input.focus(), 300);
  }

  function closePopup() {
    popup.classList.remove('show');
    isPopupOpen = false;
  }

  function handleKeyPress(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  }

  function autoResize() {
    input.style.height = 'auto';
    input.style.height = Math.min(input.scrollHeight, 100) + 'px';
  }

  // P0.5: User typing indicator
  let typingTimeout = null;
  function handleUserTyping() {
    if (!socket || !socket.connected || !sessionId) return;

    // Emit typing started
    socket.emit('user_typing', {
      sessionId: sessionId,
      isTyping: true,
    });

    // Clear previous timeout
    if (typingTimeout) {
      clearTimeout(typingTimeout);
    }

    // Stop typing after 1 second of inactivity
    typingTimeout = setTimeout(() => {
      if (socket && socket.connected && sessionId) {
        socket.emit('user_typing', {
          sessionId: sessionId,
          isTyping: false,
        });
      }
    }, 1000);
  }

  // P0.5: Show operator typing indicator
  function showTypingIndicator(isTyping, operatorName) {
    const existingIndicator = document.getElementById('typing-indicator');

    if (isTyping) {
      // Create typing indicator if not exists
      if (!existingIndicator) {
        const indicator = document.createElement('div');
        indicator.id = 'typing-indicator';
        indicator.className = 'chat-message operator-message';
        indicator.innerHTML = `
          <div class="message-content">
            <div style="display: flex; align-items: center; gap: 8px;">
              <span>${operatorName || 'Operatore'} sta scrivendo</span>
              <div style="display: flex; gap: 4px;">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
              </div>
            </div>
          </div>
        `;
        messagesContainer.appendChild(indicator);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
    } else {
      // Remove typing indicator
      if (existingIndicator) {
        existingIndicator.remove();
      }
    }
  }

  // ✅ UPDATED: New API flow - Create session first, then send messages
  async function sendMessage(messageText) {
    const message = messageText || input.value.trim();
    if (!message) return;

    // Rimuovi welcome se presente
    const welcome = messagesContainer.querySelector('.chat-welcome');
    if (welcome) welcome.remove();

    // Rimuovi smart actions precedenti se presenti
    const existingActions = document.querySelector('.smart-actions-container');
    if (existingActions) existingActions.remove();

    // Non mostrare i comandi interni come messaggi utente
    const isInternalCommand = message === 'request_operator' ||
                              message === 'continua con assistente AI' ||
                              message === 'continue_chat' ||
                              message === 'end_chat' ||
                              message === 'apri ticket';

    // Aggiungi messaggio utente (solo se non è comando interno)
    if (!isInternalCommand) {
      addMessage(message, 'user');
    }

    // Reset input
    input.value = '';
    input.style.height = 'auto';

    // Disabilita input durante invio
    setInputState(false);
    showTyping();

    const loader = showLoadingIndicator('Invio in corso...');

    try {
      // ✅ STEP 1: Create session if we don't have one
      if (!sessionId) {
        console.log('📝 Creating new chat session...');
        const sessionResponse = await fetch(`${BACKEND_URL}/api/chat/session`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            userName: 'Guest',
            userAgent: navigator.userAgent
          })
        });

        const sessionData = await sessionResponse.json();

        if (!sessionResponse.ok || !sessionData.data || !sessionData.data.id) {
          throw new Error('Failed to create session');
        }

        sessionId = sessionData.data.id;
        saveSessionId(sessionId);
        console.log('✅ Session created:', sessionId);

        // Initialize Socket.IO connection
        initializeSocketIO();
      }

      // ✅ STEP 2: Send message to session OR request operator
      if (message === 'request_operator') {
        // Request operator endpoint
        const operatorResponse = await fetch(`${BACKEND_URL}/api/chat/session/${sessionId}/request-operator`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        const operatorData = await operatorResponse.json();

        if (!operatorResponse.ok || operatorData.error) {
          throw new Error(operatorData.error?.message || 'Failed to request operator');
        }

        // Handle operator response
        if (operatorData.data?.operatorAvailable === false) {
          // No operators available
          addMessage(operatorData.data.message || 'Nessun operatore disponibile al momento.', 'bot');

          // ✅ FIX P0.3: Show smart actions to open ticket or continue with AI
          showSmartActions([
            {
              icon: '📝',
              text: 'Apri Ticket',
              description: 'Lascia un messaggio, ti ricontatteremo',
              action: 'request_ticket',
              type: 'primary'
            },
            {
              icon: '🤖',
              text: 'Continua con AI',
              description: 'Prova a chiedermi altro',
              action: 'continue_ai',
              type: 'secondary'
            }
          ]);
        } else if (operatorData.data?.operatorAvailable === true) {
          // Operator assigned - waiting for them to respond
          addMessage(`⏳ Ti abbiamo messo in coda. ${operatorData.data.operator?.name || 'Un operatore'} ti risponderà a breve.`, 'system');
          // isOperatorMode will be set when operator_assigned event is received
        } else {
          // In queue (shouldn't happen with current backend logic)
          addMessage('Sei in coda. Un operatore ti risponderà appena possibile.', 'system');
        }
      } else {
        // Normal message to AI
        const messageResponse = await fetch(`${BACKEND_URL}/api/chat/session/${sessionId}/message`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: message
          })
        });

        const data = await messageResponse.json();

        if (!messageResponse.ok || data.error) {
          throw new Error(data.error?.message || 'Failed to send message');
        }

        // Aggiungi risposta AI se presente
        if (data.data?.aiResponse && data.data.aiResponse.content) {
          addMessage(data.data.aiResponse.content, 'bot');

          // Se l'AI suggerisce operatore, mostra smart action
          if (data.data.aiResponse.suggestOperator) {
            console.log('💡 AI suggests operator assistance');
            showSmartActions([
              {
                icon: '👤',
                text: 'Parla con un operatore',
                action: 'request_operator',
                type: 'primary'
              },
              {
                icon: '🤖',
                text: 'Continua con AI',
                action: 'continue_ai',
                type: 'secondary'
              }
            ]);
          }
        } else if (data.data?.withOperator) {
          // Sei in chat con operatore - il messaggio è stato inviato
          console.log(`✅ Message sent to operator: ${data.data.operatorName}`);

          // Assicurati che isOperatorMode sia true e header sia aggiornato
          if (!isOperatorMode) {
            isOperatorMode = true;
            updateHeaderForOperatorMode();
          }
        }
      }

    } catch (error) {
      console.error('❌ Chat Error:', error);
      addMessage('Mi dispiace, c\'è stato un problema. Riprova o contatta 📧 info@lucinedinatale.it', 'bot');
    } finally {
      hideTyping();
      hideLoadingIndicator(loader);
      setInputState(true);
      input.focus();
    }
  }

  function addMessage(text, sender, operatorName = null) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${sender}`;

    const bubbleDiv = document.createElement('div');
    bubbleDiv.className = 'message-bubble';

    // Processa il testo per rendere i link cliccabili
    let processedText = escapeHtml(text);

    // Markdown: Bold (**text**) e Italic (*text* o _text_)
    processedText = processedText.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');
    processedText = processedText.replace(/\*([^*]+)\*/g, '<em>$1</em>');
    processedText = processedText.replace(/_([^_]+)_/g, '<em>$1</em>');

    // Prima processa i link markdown [testo](url)
    processedText = processedText.replace(
      /\[([^\]]+)\]\((https?:\/\/[^)]+)\)/g,
      (match, linkText, url) => {
        if (url.includes('lucinedinatale.it/products/')) {
          return '<a href="' + url + '" target="_blank" class="chat-link product-link">🎫 ' + linkText + '</a>';
        } else if (url.includes('lucinedinatale.it/cart')) {
          return '<a href="' + url + '" target="_blank" class="chat-link cart-link">🛒 ' + linkText + '</a>';
        } else if (url.includes('wa.me/')) {
          return '<a href="' + url + '" target="_blank" class="chat-link whatsapp-link">📱 ' + linkText + '</a>';
        } else {
          return '<a href="' + url + '" target="_blank" class="chat-link">' + linkText + '</a>';
        }
      }
    );

    // Poi processa le URL nude
    processedText = processedText.replace(
      /(?<!href=")(?<!href=')(https?:\/\/lucinedinatale\.it\/products\/[^\s<]+)/g,
      '<a href="$1" target="_blank" class="chat-link product-link">🎫 Prenota biglietti</a>'
    );

    processedText = processedText.replace(
      /(?<!href=")(?<!href=')(https?:\/\/lucinedinatale\.it\/cart[^\s<]*)/g,
      '<a href="$1" target="_blank" class="chat-link cart-link">🛒 Vai al carrello</a>'
    );

    // Email links
    processedText = processedText.replace(
      /(?<!href=")(?<!href=')(info@lucinedinatale\.it)/g,
      '<a href="mailto:$1" class="chat-link email-link">📧 $1</a>'
    );

    // WhatsApp links
    processedText = processedText.replace(
      /(?<!href=")(?<!href=')(https?:\/\/wa\.me\/[^\s<]+)/g,
      '<a href="$1" target="_blank" class="chat-link whatsapp-link">📱 Contatta WhatsApp</a>'
    );

    // Altri link generici
    processedText = processedText.replace(
      /(?<!href=")(?<!href=')(?<!class="chat-link[^"]*">)(https?:\/\/[^\s<]+)/g,
      '<a href="$1" target="_blank" class="chat-link">🔗 Apri link</a>'
    );

    // Converte line breaks
    processedText = processedText.replace(/\n\n/g, '<br><br>');
    processedText = processedText.replace(/\n/g, '<br>');

    bubbleDiv.innerHTML = processedText;

    // Add operator name badge ABOVE message bubble (not inline)
    if (sender === 'operator' && operatorName) {
      const badgeDiv = document.createElement('div');
      badgeDiv.className = 'operator-badge';
      badgeDiv.textContent = operatorName;
      badgeDiv.style.cssText = `
        font-size: 11px;
        color: #666;
        margin-bottom: 4px;
        font-weight: 500;
      `;
      messageDiv.appendChild(badgeDiv);
    }

    messageDiv.appendChild(bubbleDiv);
    messagesContainer.appendChild(messageDiv);

    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function showSmartActions(actions) {
    // Rimuovi smart actions precedenti
    const existingActions = document.querySelector('.smart-actions-container');
    if (existingActions) {
      existingActions.remove();
    }

    if (!actions || !Array.isArray(actions) || actions.length === 0) {
      console.warn('⚠️ showSmartActions called with invalid data:', actions);
      return;
    }

    const actionsContainer = document.createElement('div');
    actionsContainer.className = 'smart-actions-container';

    const actionsGrid = document.createElement('div');
    actionsGrid.className = 'smart-actions-grid';

    actions.forEach(action => {
      if (!action || typeof action !== 'object' || !action.text) {
        console.error('❌ Invalid action object:', action);
        return;
      }

      const icon = action.icon || '📌';
      const text = action.text;
      const description = action.description || '';
      const type = action.type || 'secondary';

      const actionButton = document.createElement('button');
      actionButton.className = `smart-action-button ${type}`;

      actionButton.innerHTML = `
        <div class="action-icon">${icon}</div>
        <div class="action-content">
          <div class="action-text">${text}</div>
          ${description ? `<div class="action-description">${description}</div>` : ''}
        </div>
      `;

      if (action.disabled === true) {
        actionButton.disabled = true;
        actionButton.style.opacity = '0.8';
        actionButton.style.cursor = 'default';
      }

      if (!action.disabled && !action.action && !action.url) {
        actionButton.disabled = true;
        actionButton.style.opacity = '0.6';
      }

      actionButton.addEventListener('click', () => {
        if (action.url) {
          window.open(action.url, '_blank');
        } else if (action.action === 'request_operator') {
          sendMessage('request_operator');
        } else if (action.action === 'continue_ai') {
          sendMessage('continua con assistente AI');
        } else if (action.action === 'continue_chat') {
          sendMessage('continue_chat');
        } else if (action.action === 'end_chat') {
          sendMessage('end_chat');
        } else if (action.action === 'request_ticket') {
          // ✅ FIX P0.4: Show ticket form instead of sending message
          showTicketForm();
          actionsContainer.remove();
        } else {
          console.warn('⚠️ Unknown action:', action.action);
        }
        actionsContainer.remove();
      });

      actionsGrid.appendChild(actionButton);
    });

    actionsContainer.appendChild(actionsGrid);
    messagesContainer.appendChild(actionsContainer);

    // ✅ DEBUG: Confirm buttons were added
    console.log(`✅ Smart actions added to DOM: ${actions.length} buttons`);
    console.log('📍 Actions container in DOM:', messagesContainer.contains(actionsContainer));

    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function showTyping() {
    typingIndicator.classList.add('show');
  }

  function hideTyping() {
    typingIndicator.classList.remove('show');
  }

  function setInputState(enabled) {
    input.disabled = !enabled;
    sendBtn.disabled = !enabled;
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function showLoadingIndicator(message = 'Caricamento...') {
    const existingLoader = messagesContainer.querySelector('.chat-loading-indicator');
    if (existingLoader) {
      existingLoader.remove();
    }

    const loader = document.createElement('div');
    loader.className = 'chat-loading-indicator';
    loader.innerHTML = `
      <div class="loading-content">
        <div class="spinner"></div>
        <span class="loading-text">${message}</span>
      </div>
    `;
    messagesContainer.appendChild(loader);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    return loader;
  }

  function hideLoadingIndicator(loader) {
    if (loader && loader.parentNode) {
      loader.parentNode.removeChild(loader);
    }
  }

  function updateHeaderForOperatorMode() {
    const chatTitle = document.querySelector('.chat-title');
    if (chatTitle) {
      chatTitle.innerHTML = '🟢 CHAT DAL VIVO - OPERATORE';
      chatTitle.style.color = '#10B981';
    }
  }

  // ✅ UPDATED: Resume from ticket - Fixed endpoint
  async function resumeChatFromTicket(token) {
    try {
      console.log('🔗 Resuming chat from ticket token...');

      const response = await fetch(`${BACKEND_URL}/api/tickets/resume/${token}`);
      const data = await response.json();

      if (!response.ok || data.error) {
        console.error('❌ Resume error:', data.message);
        addMessage(`❌ ${data.message || 'Token non valido o scaduto'}`, 'bot');
        return;
      }

      console.log('✅ Chat resumed:', data);

      // Set sessionId from ticket
      sessionId = data.data?.sessionId;
      if (sessionId) {
        saveSessionId(sessionId);
      }

      // Open popup automatically
      openPopup();

      // Load previous messages from chatHistory
      if (data.data?.chatHistory) {
        try {
          const messages = JSON.parse(data.data.chatHistory);
          messages.forEach((msg) => {
            const sender = msg.type === 'user' ? 'user' :
                          msg.type === 'operator' ? 'operator' : 'ai' ? 'bot' : 'bot';
            addMessage(msg.content, sender);
          });
        } catch (e) {
          console.error('Error parsing chat history:', e);
        }
      }

      // Show welcome message
      addMessage('Conversazione ripristinata! Continua da dove avevi lasciato.', 'bot');

      // Initialize Socket.IO
      if (sessionId) {
        initializeSocketIO();
      }

    } catch (error) {
      console.error('❌ Failed to resume chat:', error);
      addMessage('❌ Errore nel riprendere la conversazione. Riprova più tardi.', 'bot');
    }
  }

  // Esponi sendMessage globalmente
  window.sendMessage = sendMessage;

  // Show ticket form
  function showTicketForm() {
    const ticketHtml = `
      <div class="ticket-form" style="margin: 1rem 0; padding: 1rem; background: rgba(45, 45, 45, 0.8); border-radius: 12px; border: 1px solid rgba(255,255,255,0.2);">
        <h4 style="color: #f59e0b; margin-bottom: 1rem; font-size: 1.1rem;">📝 Lascia un messaggio</h4>
        <input type="text" id="ticketName" placeholder="Il tuo nome" style="width: 100%; margin-bottom: 0.5rem; padding: 0.5rem; border: 1px solid #555; border-radius: 6px; background: #333; color: white;">
        <input type="email" id="ticketEmail" placeholder="La tua email" style="width: 100%; margin-bottom: 0.5rem; padding: 0.5rem; border: 1px solid #555; border-radius: 6px; background: #333; color: white;">
        <textarea id="ticketMessage" placeholder="Il tuo messaggio..." style="width: 100%; height: 80px; margin-bottom: 1rem; padding: 0.5rem; border: 1px solid #555; border-radius: 6px; background: #333; color: white; resize: vertical;"></textarea>
        <button onclick="submitTicket()" style="background: #dc2626; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 6px; cursor: pointer; font-weight: bold;">📨 Invia messaggio</button>
      </div>
    `;

    // Aggiungi form come messaggio HTML
    const ticketDiv = document.createElement('div');
    ticketDiv.className = 'chat-message bot';
    ticketDiv.innerHTML = `<div class="message-bubble">${ticketHtml}</div>`;
    messagesContainer.appendChild(ticketDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // ✅ UPDATED: Ticket creation with new schema
  window.submitTicket = async function() {
    const name = document.getElementById('ticketName')?.value;
    const email = document.getElementById('ticketEmail')?.value;
    const message = document.getElementById('ticketMessage')?.value;

    if (!name || !email || !message) {
      alert('Compila tutti i campi');
      return;
    }

    try {
      const response = await fetch(`${BACKEND_URL}/api/tickets`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          sessionId: sessionId,
          userName: name,
          contactMethod: 'EMAIL',
          email: email,
          initialMessage: message,
          priority: 'NORMAL'
        })
      });

      const data = await response.json();

      if (response.ok && data.success && data.data?.ticket) {
        addMessage(`✅ Ticket creato! Ti ricontatteremo al più presto via email.`, 'bot');
        // Rimuovi il form
        const form = document.querySelector('.ticket-form');
        if (form) form.remove();
      } else {
        throw new Error(data.error?.message || 'Errore creazione ticket');
      }

    } catch (error) {
      console.error('❌ Errore creazione ticket:', error);
      addMessage('❌ Errore nell\'invio del messaggio. Riprova o scrivi a 📧 info@lucinedinatale.it', 'bot');
    }
  };

  // ========================
  // 📡 SOCKET.IO CONNECTION
  // ========================

  function initializeSocketIO() {
    if (!sessionId) {
      console.log('⚠️ Cannot connect Socket.IO without sessionId');
      return;
    }

    if (socket && socket.connected) {
      console.log('✅ Socket.IO already connected');
      return;
    }

    try {
      console.log('🔌 Connecting to Socket.IO:', SOCKET_URL);
      socket = io(SOCKET_URL, {
        transports: ['websocket', 'polling'],
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionAttempts: 5
      });

      socket.on('connect', () => {
        console.log('✅ Socket.IO connected');
        console.log('🔍 Current sessionId:', sessionId);

        // Join chat session (use current value of sessionId)
        if (sessionId) {
          socket.emit('join_chat', { sessionId: sessionId });
          console.log('📤 Emitted join_chat with sessionId:', sessionId);
        } else {
          console.error('❌ Cannot join chat: sessionId is undefined');
        }
      });

      socket.on('chat_joined', (data) => {
        console.log('✅ Joined chat:', data);
      });

      socket.on('new_message', (data) => {
        console.log('📨 New message:', data);

        if (data.message && !displayedMessageIds.has(data.message.id)) {
          displayedMessageIds.add(data.message.id);

          const sender = data.message.type === 'user' ? 'user' :
                        data.message.type === 'operator' ? 'operator' : 'bot';

          addMessage(data.message.content, sender, data.message.operatorName);

          // Show smart actions if present
          if (data.message.smartActions && data.message.smartActions.length > 0) {
            showSmartActions(data.message.smartActions);
          }
        }
      });

      // Listen for operator messages (from dashboard operator)
      socket.on('operator_message', (data) => {
        console.log('👤💬 Operator message received:', data);

        if (data.message && !displayedMessageIds.has(data.message.id)) {
          displayedMessageIds.add(data.message.id);
          addMessage(data.message.content, 'operator', data.message.operatorName);
        }
      });

      // P0.5: Listen for operator typing indicator
      socket.on('operator_typing', (data) => {
        if (data.sessionId === sessionId) {
          showTypingIndicator(data.isTyping, data.operatorName);
        }
      });

      socket.on('operator_assigned', (data) => {
        console.log('👤 Operator assigned:', data);
        isOperatorMode = true;
        updateHeaderForOperatorMode();
        addMessage(`✅ ${data.operatorName || 'Un operatore'} si è connesso alla chat!`, 'system');
      });

      socket.on('operator_joined', (data) => {
        console.log('👤 Operator joined:', data);
        isOperatorMode = true;
        updateHeaderForOperatorMode();
      });

      socket.on('chat_closed', (data) => {
        console.log('👋 Chat closed:', data);
        addMessage('La chat è stata chiusa. Grazie per averci contattato!', 'system');

        // P11 Fix: Clear session quando operatore chiude la chat
        localStorage.removeItem('chatSessionId');
        sessionId = null;
        isOperatorMode = false;

        // P1.7 Fix: Disable input after chat closed
        setInputState(false);
        input.placeholder = 'Chat chiusa';

        console.log('✅ Session cleared - next conversation will be new');
      });

      socket.on('disconnect', () => {
        console.log('👋 Socket.IO disconnected');
      });

      socket.on('connect_error', (error) => {
        console.error('❌ Socket.IO connection error:', error);
      });

    } catch (error) {
      console.error('❌ Socket.IO initialization error:', error);
    }
  }

  // Initialize Socket.IO if we have a session
  if (sessionId) {
    initializeSocketIO();
  }
}
</script>
