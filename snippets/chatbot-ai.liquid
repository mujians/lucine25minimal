<!-- FAQ CHATBOT AI - Snippet Shopify -->
<style>
/* Chatbot Container */
.faq-chatbot {
  margin: 3rem 0;
  padding: 0;
}

.chatbot-card {
  background: rgba(15, 47, 31, 0.3);
  border-radius: 12px;
  padding: 1.5rem;
  position: relative;
  overflow: hidden;
}

/* Chat Messages Area */
.chat-messages {
  min-height: 300px;
  max-height: 400px;
  overflow-y: auto;
  padding: 1rem;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  margin-bottom: 1rem;
  scroll-behavior: smooth;
}

.chat-message {
  margin-bottom: 1rem;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.chat-message.user {
  text-align: right;
}

.chat-message.bot {
  text-align: left;
}

.message-bubble {
  display: inline-block;
  padding: 0.75rem 1rem;
  border-radius: 12px;
  max-width: 80%;
  font-size: 1.188rem;
  line-height: 1.5;
}

.user .message-bubble {
  background: rgba(212, 175, 55, 0.2);
  color: var(--christmas-gold);
  border: 1px solid var(--christmas-gold);
}

.bot .message-bubble {
  background: rgba(139, 195, 74, 0.1);
  color: var(--text-white);
  border: 1px solid var(--christmas-green);
}

/* Input Area */
.chat-input-area {
  display: flex;
  gap: 1rem;
}

.chat-input {
  flex: 1;
  background: rgba(255, 255, 255, 0.05);
  border: 2px solid rgba(255, 255, 255, 0.2);
  color: var(--text-white);
  padding: 1rem;
  border-radius: 8px;
  font-size: 1.188rem;
  font-family: 'Providence Sans', -apple-system, sans-serif;
  transition: all 0.3s ease;
}

.chat-input:focus {
  outline: none;
  border-color: var(--christmas-green);
  background: rgba(255, 255, 255, 0.08);
}

.chat-input::placeholder {
  color: rgba(255, 255, 255, 0.4);
}

.chat-send-btn {
  background: var(--christmas-red);
  color: white;
  border: none;
  padding: 1rem 2rem;
  border-radius: 8px;
  font-size: 1.125rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-family: 'Providence Sans', -apple-system, sans-serif;
}

.chat-send-btn:hover {
  background: var(--christmas-green);
  transform: translateY(-2px);
}

.chat-send-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Typing Indicator */
.typing-indicator {
  display: none;
  padding: 0.5rem 1rem;
  color: var(--text-gray);
  font-style: italic;
}

.typing-indicator.show {
  display: block;
}

.typing-indicator span {
  animation: blink 1.4s infinite;
}

.typing-indicator span:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes blink {
  0%, 60%, 100% { opacity: 0.3; }
  30% { opacity: 1; }
}

/* Welcome Message */
.chat-welcome {
  text-align: center;
  padding: 2rem;
  color: var(--text-gray);
}

.chat-welcome h4 {
  color: var(--christmas-green);
  font-family: 'Homemade Apple', cursive;
  font-size: 1.5rem;
  margin-bottom: 0.5rem;
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .chat-messages {
    min-height: 250px;
    max-height: 350px;
  }
  
  .message-bubble {
    font-size: 1.125rem;
  }
  
  .chat-send-btn {
    padding: 1rem 1.5rem;
  }
}
</style>

<div class="faq-chatbot">
  <div class="sketch-card sketch seed-8">
    <svg class="sketch-border" viewBox="0 0 100 100" aria-hidden="true" preserveAspectRatio="none">
      <defs>
        <filter id="wobble-chatbot-{{ section.id }}">
          <feTurbulence type="fractalNoise" baseFrequency="1.1" numOctaves="1" seed="19"></feTurbulence>
          <feDisplacementMap in="SourceGraphic" scale="1"></feDisplacementMap>
        </filter>
      </defs>
      <rect x="4" y="4" width="92" height="92" rx="12" fill="none" stroke="currentColor" stroke-width="3.2" stroke-linecap="round" stroke-dasharray="13 7 9 11 6 8" vector-effect="non-scaling-stroke" filter="url(#wobble-chatbot-{{ section.id }})"></rect>
    </svg>
    
    <h3 style="color: var(--christmas-red); margin-bottom: 1.5rem;">Chatta con l'Assistente delle Lucine</h3>
    
    <div class="chatbot-card">
      <div class="chat-messages" id="chatMessages">
        <div class="chat-welcome">
          <h4>Ciao! ✨</h4>
          <p>Sono l'assistente delle Lucine di Natale. Chiedimi informazioni su biglietti, orari, parcheggi o qualsiasi cosa riguardi l'evento!</p>
        </div>
      </div>
      
      <div class="typing-indicator" id="typingIndicator">
        L'assistente sta scrivendo<span>.</span><span>.</span><span>.</span>
      </div>
      
      <div class="chat-input-area">
        <input 
          type="text" 
          class="chat-input" 
          id="chatInput" 
          placeholder="Fai una domanda..."
          onkeypress="if(event.key === 'Enter') sendMessage()"
        >
        <button class="chat-send-btn" id="sendBtn" onclick="sendMessage()">
          Invia
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// CONFIGURAZIONE - Backend Vercel deployato
const BACKEND_URL = 'https://chatbot-backend-i3opgg4yo-brunos-projects-075c84f2.vercel.app/api/chat';

// Funzione per inviare messaggi (SICURA - nessuna API key esposta)
async function sendMessage() {
  const input = document.getElementById('chatInput');
  const messagesDiv = document.getElementById('chatMessages');
  const sendBtn = document.getElementById('sendBtn');
  const typingIndicator = document.getElementById('typingIndicator');
  
  const userMessage = input.value.trim();
  if (!userMessage) return;
  
  // Rimuovi welcome message se presente
  const welcome = messagesDiv.querySelector('.chat-welcome');
  if (welcome) welcome.remove();
  
  // Aggiungi messaggio utente
  messagesDiv.innerHTML += `
    <div class="chat-message user">
      <div class="message-bubble">${escapeHtml(userMessage)}</div>
    </div>
  `;
  
  // Reset input e disabilita durante invio
  input.value = '';
  input.disabled = true;
  sendBtn.disabled = true;
  typingIndicator.classList.add('show');
  
  // Scroll to bottom
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
  
  try {
    // Chiamata al backend Vercel (sicuro)
    const response = await fetch(BACKEND_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: userMessage
      })
    });
    
    const data = await response.json();
    
    if (data.error) {
      throw new Error(data.error);
    }
    
    const botReply = data.reply;
    
    // Aggiungi risposta bot
    messagesDiv.innerHTML += `
      <div class="chat-message bot">
        <div class="message-bubble">${escapeHtml(botReply)}</div>
      </div>
    `;
    
  } catch (error) {
    // Messaggio di errore user-friendly
    messagesDiv.innerHTML += `
      <div class="chat-message bot">
        <div class="message-bubble">
          Mi dispiace, c'è stato un problema di connessione. 
          Riprova tra qualche istante o contatta <a href="mailto:info@lucinedinatale.it" style="color: var(--christmas-red);">info@lucinedinatale.it</a>
        </div>
      </div>
    `;
    console.error('Chat Error:', error);
  } finally {
    // Riabilita input
    input.disabled = false;
    sendBtn.disabled = false;
    typingIndicator.classList.remove('show');
    input.focus();
    
    // Scroll to bottom
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }
}

// Funzione per escape HTML (sicurezza)
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// Focus automatico all'input quando il snippet viene caricato
document.addEventListener('DOMContentLoaded', () => {
  const chatInput = document.getElementById('chatInput');
  if (chatInput) {
    chatInput.focus();
  }
});

// Gestione mobile - previeni zoom su focus
document.addEventListener('DOMContentLoaded', function() {
  const input = document.getElementById('chatInput');
  if (input && window.innerWidth <= 768) {
    input.addEventListener('focus', function() {
      if (this.getAttribute('readonly')) {
        this.removeAttribute('readonly');
        this.blur();
        this.focus();
      }
    });
    // Previeni zoom su mobile
    input.setAttribute('readonly', 'readonly');
    setTimeout(() => input.removeAttribute('readonly'), 100);
  }
});
</script>