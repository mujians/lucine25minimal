<!-- FAQ CHATBOT AI - Snippet Shopify v2.1.0 -->
<!-- Complete Widget with Smart Actions, Operator Escalation & Live Chat Support -->
<style>
/* Chatbot Container */
.faq-chatbot {
  margin: 3rem 0;
  padding: 0;
}

.chatbot-card {
  background: rgba(15, 47, 31, 0.3);
  border-radius: 12px;
  padding: 1.5rem;
  position: relative;
  overflow: hidden;
}

/* Chat Messages Area */
.chat-messages {
  min-height: 300px;
  max-height: 400px;
  overflow-y: auto;
  padding: 1rem;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  margin-bottom: 1rem;
  scroll-behavior: smooth;
}

.chat-message {
  margin-bottom: 1rem;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.chat-message.user {
  text-align: right;
}

.chat-message.bot {
  text-align: left;
}

.message-bubble {
  display: inline-block;
  padding: 0.75rem 1rem;
  border-radius: 12px;
  max-width: 80%;
  font-size: 1.188rem;
  line-height: 1.5;
}

.user .message-bubble {
  background: rgba(212, 175, 55, 0.2);
  color: var(--christmas-gold);
  border: 1px solid var(--christmas-gold);
}

.bot .message-bubble {
  background: rgba(139, 195, 74, 0.1);
  color: white;
  border: 1px solid var(--christmas-green);
}

/* Smart Actions - Pulsanti dinamici */
.smart-actions {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 0.75rem;
  justify-content: flex-start;
}

.smart-action-button {
  background: rgba(139, 195, 74, 0.2);
  border: 2px solid var(--christmas-green);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 8px;
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-family: Arial, -apple-system, sans-serif;
}

.smart-action-button:hover {
  background: var(--christmas-green);
  transform: translateY(-1px);
}

.smart-action-button.operator {
  background: rgba(212, 175, 55, 0.2);
  border-color: var(--christmas-gold);
}

.smart-action-button.operator:hover {
  background: var(--christmas-gold);
  color: var(--text-dark);
}

.action-content {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.action-title {
  font-weight: 600;
  font-size: 0.875rem;
}

.action-description {
  font-size: 0.75rem;
  opacity: 0.8;
  margin-top: 0.125rem;
}

/* Input Area */
.chat-input-area {
  display: flex;
  gap: 1rem;
}

.chat-input {
  flex: 1;
  background: rgba(255, 255, 255, 0.05);
  border: 2px solid rgba(255, 255, 255, 0.2);
  color: var(--text-white);
  padding: 1rem;
  border-radius: 8px;
  font-size: 1.188rem;
  font-family: Arial, -apple-system, sans-serif;
  transition: all 0.3s ease;
}

.chat-input:focus {
  outline: none;
  border-color: var(--christmas-green);
  background: rgba(255, 255, 255, 0.08);
}

.chat-input::placeholder {
  color: rgba(255, 255, 255, 0.4);
}

.chat-send-btn {
  background: var(--christmas-red);
  color: white;
  border: none;
  padding: 1rem 2rem;
  border-radius: 8px;
  font-size: 1.125rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-family: Arial, -apple-system, sans-serif;
}

.chat-send-btn:hover {
  background: var(--christmas-green);
  transform: translateY(-2px);
}

.chat-send-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Typing Indicator */
.typing-indicator {
  display: none;
  padding: 0.5rem 1rem;
  color: var(--text-gray);
  font-style: italic;
}

.typing-indicator.show {
  display: block;
}

.typing-indicator span {
  animation: blink 1.4s infinite;
}

.typing-indicator span:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes blink {
  0%, 60%, 100% { opacity: 0.3; }
  30% { opacity: 1; }
}

/* Welcome Message */
.chat-welcome {
  background: rgba(139, 195, 74, 0.1);
  border: 1px solid var(--christmas-green);
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1rem;
  color: white;
}

.chat-welcome h4 {
  color: var(--christmas-green);
  font-family: 'Homemade Apple', cursive;
  font-size: 1.5rem;
  margin-bottom: 0.5rem;
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .chat-messages {
    min-height: 250px;
    max-height: 350px;
  }
  
  .message-bubble {
    font-size: 1.125rem;
  }
  
  .chat-send-btn {
    padding: 1rem 1.5rem;
  }
  
  .smart-actions {
    flex-direction: column;
  }
  
  .smart-action-button {
    width: 100%;
    justify-content: center;
  }
}
</style>

<div class="faq-chatbot">
  <div class="sketch-card sketch seed-8">
    <svg class="sketch-border" viewBox="0 0 100 100" aria-hidden="true" preserveAspectRatio="none">
      <defs>
        <filter id="wobble-chatbot-{{ section.id }}">
          <feTurbulence type="fractalNoise" baseFrequency="1.1" numOctaves="1" seed="19"></feTurbulence>
          <feDisplacementMap in="SourceGraphic" scale="1"></feDisplacementMap>
        </filter>
      </defs>
      <rect x="4" y="4" width="92" height="92" rx="12" fill="none" stroke="currentColor" stroke-width="3.2" stroke-linecap="round" stroke-dasharray="13 7 9 11 6 8" vector-effect="non-scaling-stroke" filter="url(#wobble-chatbot-{{ section.id }})"></rect>
    </svg>
    
    <h3 style="color: var(--christmas-red); margin-bottom: 1.5rem;">Chatta con l'Assistente delle Lucine</h3>
    
    <div class="chatbot-card">
      <div class="chat-messages" id="chatMessages">
        <div class="chat-welcome">
          <h4>Ciao! ✨</h4>
          <p>Sono l'assistente delle Lucine di Natale. Chiedimi informazioni su biglietti, orari, parcheggi o qualsiasi cosa riguardi l'evento!</p>
        </div>
      </div>
      
      <div class="typing-indicator" id="typingIndicator">
        L'assistente sta scrivendo<span>.</span><span>.</span><span>.</span>
      </div>
      
      <div class="chat-input-area">
        <input 
          type="text" 
          class="chat-input" 
          id="chatInput" 
          placeholder="Fai una domanda..."
          onkeypress="if(event.key === 'Enter') sendMessage()"
        >
        <button class="chat-send-btn" id="sendBtn" onclick="sendMessage()">
          Invia
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// CONFIGURAZIONE - Backend Render deployato v2.1.0
const BACKEND_URL = 'https://lucine-chatbot.onrender.com/api/chat';
let currentSessionId = generateSessionId();
let isOperatorConnected = false;
let pollingInterval = null;

// Genera session ID unico
function generateSessionId() {
  return 'session-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
}

// Polling per messaggi operatore
function startOperatorPolling() {
  if (pollingInterval) return;
  
  pollingInterval = setInterval(async () => {
    try {
      const response = await fetch(`${BACKEND_URL.replace('/chat', '')}/chat/poll/${currentSessionId}`);
      const data = await response.json();
      
      if (data.hasNewMessages) {
        data.messages.forEach(msg => {
          if (msg.sender === 'OPERATOR') {
            addMessage('bot', `👨‍💼 **${msg.metadata?.operatorName || 'Operatore'}**: ${msg.message}`);
          }
        });
      }
      
      // Aggiorna stato connessione
      isOperatorConnected = data.sessionStatus === 'WITH_OPERATOR';
      
    } catch (error) {
      console.error('Polling error:', error);
    }
  }, 3000);
}

function stopOperatorPolling() {
  if (pollingInterval) {
    clearInterval(pollingInterval);
    pollingInterval = null;
  }
}

// Funzione per inviare messaggi
async function sendMessage(messageText = null) {
  const input = document.getElementById('chatInput');
  const messagesDiv = document.getElementById('chatMessages');
  const sendBtn = document.getElementById('sendBtn');
  const typingIndicator = document.getElementById('typingIndicator');
  
  const userMessage = messageText || input.value.trim();
  if (!userMessage) return;
  
  // Rimuovi welcome message se presente
  const welcome = messagesDiv.querySelector('.chat-welcome');
  if (welcome) welcome.remove();
  
  // Aggiungi messaggio utente
  addMessage('user', userMessage);
  
  // Reset input e disabilita durante invio
  if (!messageText) {
    input.value = '';
    input.disabled = true;
    sendBtn.disabled = true;
  }
  typingIndicator.classList.add('show');
  
  try {
    const response = await fetch(BACKEND_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: userMessage,
        sessionId: currentSessionId
      })
    });
    
    const data = await response.json();
    
    if (data.error) {
      throw new Error(data.error);
    }
    
    // Aggiungi risposta bot
    addMessage('bot', data.reply);
    
    // Gestisci smart actions
    if (data.actions && data.actions.length > 0) {
      addSmartActions(data.actions);
    }
    
    // Gestisci smart actions speciali
    if (data.smartActions && data.smartActions.length > 0) {
      addSmartActions(data.smartActions);
    }
    
    // Gestisci connessione operatore
    if (data.status === 'connecting_operator') {
      isOperatorConnected = true;
      startOperatorPolling();
      addMessage('bot', `🟢 Connesso con **${data.operator.name}**! Ora puoi chattare direttamente.`);
    }
    
    if (data.status === 'with_operator') {
      isOperatorConnected = true;
      startOperatorPolling();
    }
    
  } catch (error) {
    addMessage('bot', `Mi dispiace, c'è stato un problema di connessione. Riprova tra qualche istante o contatta <a href="mailto:info@lucinedinatale.it" style="color: var(--christmas-red);">info@lucinedinatale.it</a>`);
    console.error('Chat Error:', error);
  } finally {
    // Riabilita input
    if (!messageText) {
      input.disabled = false;
      sendBtn.disabled = false;
      input.focus();
    }
    typingIndicator.classList.remove('show');
  }
}

// Aggiungi messaggio alla chat
function addMessage(sender, message) {
  const messagesDiv = document.getElementById('chatMessages');
  
  messagesDiv.innerHTML += `
    <div class="chat-message ${sender}">
      <div class="message-bubble">${escapeHtml(message)}</div>
    </div>
  `;
  
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// Aggiungi smart actions
function addSmartActions(actions) {
  const messagesDiv = document.getElementById('chatMessages');
  
  let actionHTML = '<div class="smart-actions">';
  
  actions.forEach(action => {
    if (typeof action === 'string') {
      // Azioni semplici
      switch(action) {
        case 'biglietti_acquisto':
          actionHTML += `
            <button class="smart-action-button" onclick="window.open('https://lucinedinatale.it/collections/biglietti', '_blank')">
              🎫 <div class="action-content">
                <div class="action-title">Acquista Biglietti</div>
                <div class="action-description">Vai al shop ufficiale</div>
              </div>
            </button>
          `;
          break;
        case 'richiesta_operatore':
          actionHTML += `
            <button class="smart-action-button operator" onclick="sendMessage('request_operator')">
              👨‍💼 <div class="action-content">
                <div class="action-title">Contatta Operatore</div>
                <div class="action-description">Chat live con operatore disponibile</div>
              </div>
            </button>
          `;
          break;
        case 'info_parcheggi':
          actionHTML += `
            <button class="smart-action-button" onclick="sendMessage('informazioni parcheggi')">
              🅿️ <div class="action-content">
                <div class="action-title">Info Parcheggi</div>
                <div class="action-description">Dove parcheggiare e navette</div>
              </div>
            </button>
          `;
          break;
        case 'info_orari':
          actionHTML += `
            <button class="smart-action-button" onclick="sendMessage('che orari avete')">
              🕐 <div class="action-content">
                <div class="action-title">Orari</div>
                <div class="action-description">Apertura e chiusura</div>
              </div>
            </button>
          `;
          break;
        case 'info_location':
          actionHTML += `
            <button class="smart-action-button" onclick="sendMessage('come arrivare')">
              📍 <div class="action-content">
                <div class="action-title">Come Arrivare</div>
                <div class="action-description">Posizione e indicazioni</div>
              </div>
            </button>
          `;
          break;
        case 'info_prezzi':
          actionHTML += `
            <button class="smart-action-button" onclick="sendMessage('quanto costa il biglietto')">
              💰 <div class="action-content">
                <div class="action-title">Prezzi</div>
                <div class="action-description">Tutte le tipologie</div>
              </div>
            </button>
          `;
          break;
      }
    } else if (typeof action === 'object') {
      // Azioni complesse (per ticket support)
      const icon = action.icon || '📧';
      const buttonClass = action.type === 'ticket_whatsapp' ? 'operator' : '';
      
      if (action.type === 'ticket_email') {
        actionHTML += `
          <button class="smart-action-button ${buttonClass}" onclick="window.open('mailto:info@lucinedinatale.it?subject=Richiesta Assistenza', '_blank')">
            ${icon} <div class="action-content">
              <div class="action-title">${action.text}</div>
              <div class="action-description">${action.description}</div>
            </div>
          </button>
        `;
      } else if (action.type === 'ticket_whatsapp') {
        actionHTML += `
          <button class="smart-action-button ${buttonClass}" onclick="window.open('https://wa.me/393123456789?text=Ciao, ho bisogno di assistenza per Lucine di Natale', '_blank')">
            ${icon} <div class="action-content">
              <div class="action-title">${action.text}</div>
              <div class="action-description">${action.description}</div>
            </div>
          </button>
        `;
      }
    }
  });
  
  actionHTML += '</div>';
  
  if (actionHTML !== '<div class="smart-actions"></div>') {
    messagesDiv.innerHTML += actionHTML;
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }
}

// Funzione per escape HTML (sicurezza)
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// Focus automatico all'input quando il snippet viene caricato
document.addEventListener('DOMContentLoaded', () => {
  const chatInput = document.getElementById('chatInput');
  if (chatInput) {
    chatInput.focus();
  }
});

// Gestione mobile - previeni zoom su focus  
document.addEventListener('DOMContentLoaded', function() {
  const input = document.getElementById('chatInput');
  if (input && window.innerWidth <= 768) {
    input.addEventListener('focus', function() {
      if (this.getAttribute('readonly')) {
        this.removeAttribute('readonly');
        this.blur();
        this.focus();
      }
    });
    input.setAttribute('readonly', 'readonly');
    setTimeout(() => input.removeAttribute('readonly'), 100);
  }
});

// Click tracking per debug
document.addEventListener('click', function(e) {
  if (e.target.closest('.smart-action-button')) {
    console.log('CLICK EVENT:', {
      target: e.target.tagName + (e.target.className ? '.' + e.target.className.replace(/\s+/g, '.') : ''),
      targetText: e.target.textContent?.trim(),
      closest: e.target.closest('.smart-action-button')?.tagName + (e.target.closest('.smart-action-button')?.className ? '.' + e.target.closest('.smart-action-button').className.replace(/\s+/g, '.') : ''),
      closestText: e.target.closest('.smart-action-button')?.textContent?.trim(),
      href: e.target.href || 'no href',
      dataEvey: e.target.dataset.evey || 'no data-evey',
      coordinates: { x: e.clientX, y: e.clientY },
      timestamp: new Date().toLocaleTimeString()
    });
  }
});
</script>